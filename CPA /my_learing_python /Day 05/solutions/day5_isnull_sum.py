# ==============================================================================
# [문제 1. 데이터프레임 생성 및 기본 정보 확인]
# ==============================================================================

# 관련 주제: 5.1 / 데이터프레임 생성 및 탐색
# 요구사항:
# 다음 정보를 포함하는 Pandas DataFrame을 생성하세요:
# * 컬럼: `Name`, `Age`, `City`
# * 데이터:
#     * 'Alice', 25, 'New York'
#     * 'Bob', 30, 'Paris'
#     * 'Charlie', 35, 'London'
# 생성된 데이터프레임의 다음 정보를 출력하세요:
# 1. 데이터프레임 자체를 출력
# 2. 데이터프레임의 상위 2개 행 출력
# 3. 각 컬럼의 데이터 타입(Dtypes) 출력
# 4. 데이터프레임의 행과 열의 개수(Shape) 출력
# 5. 데이터프레임의 기본 통계 정보(describe) 출력
# 학습 목표: Pandas DataFrame을 생성하고, `head()`, `dtypes`, `shape`, `describe()`와 같은 기본적인 탐색 메서드를 사용하여 데이터의 구조와 요약을 빠르게 파악하는 방법을 학습합니다.
# 가이드:
# * `pd.DataFrame()` 함수를 사용하여 딕셔너리나 리스트 등을 통해 데이터프레임을 생성할 수 있습니다.
# * 각 메서드의 사용법을 정확히 숙지하고 적용하세요.

# --- [최초 나의 코딩] ---
import pandas as pd

data = {
    'Name': ['Alice', 'Bob', 'Charlie'],
    'Age': [25, 30, 35],
    'City': ['New York', 'Paris', 'London']
}
df = pd.DataFrame(data)

print("--- 1. 데이터프레임 전체 출력 ---")
print(df)

print("\n--- 2. 데이터프레임 상위 2개 행 출력 ---")
print(df.head(2))

print("\n--- 3. 각 컬럼의 데이터 타입(Dtypes) ---")
print(df.dtypes)

print("\n--- 4. 데이터프레임의 행과 열 개수(Shape) ---")
print(df.shape)

print("\n--- 5. 데이터프레임의 기본 통계 정보(describe) ---")
print(df.describe())

# --- [코드 실행 결과] ---
"""
--- 1. 데이터프레임 전체 출력 ---
      Name  Age      City
0    Alice   25  New York
1      Bob   30     Paris
2  Charlie   35    London

--- 2. 데이터프레임 상위 2개 행 출력 ---
    Name  Age      City
0  Alice   25  New York
1    Bob   30     Paris

--- 3. 각 컬럼의 데이터 타입(Dtypes) ---
Name    object
Age      int64
City    object
dtype: object

--- 4. 데이터프레임의 행과 열 개수(Shape) ---
(3, 3)

--- 5. 데이터프레임의 기본 통계 정보(describe) ---
        Age
count   3.0
mean   30.0
std     5.0
min    25.0
25%    27.5
50%    30.0
75%    32.5
max    35.0
"""

# --- [피드백] ---
"""
문제 1을 **완벽하게 해결**하셨습니다! Pandas DataFrame을 생성하고, 요구된 모든 기본 탐색 메서드를 정확하게 사용했습니다. 데이터 분석의 첫 단계를 아주 깔끔하게 수행해내셨습니다.

1.  **데이터프레임 생성**: 딕셔너리를 사용하여 컬럼 이름과 데이터를 명확하게 정의하여 DataFrame을 성공적으로 생성했습니다. 깔끔하고 표준적인 방법입니다.
2.  **기본 정보 출력**:
    * `print(df)`: 데이터프레임 전체 내용을 출력하여 데이터의 구성을 한눈에 파악할 수 있게 했습니다.
    * `df.head(2)`: 데이터프레임의 상위 N개 행을 확인하는 `head()` 메서드를 정확히 사용하여 데이터의 첫 부분을 빠르게 스캔했습니다. 이는 대규모 데이터셋에서 특히 유용합니다.
    * `df.dtypes`: 각 컬럼의 데이터 타입을 확인하는 `dtypes` 속성을 올바르게 사용하여, 데이터가 숫자인지, 텍스트인지 등을 정확히 파악했습니다. `Age`가 `int64`로, `Name`과 `City`가 `object`(문자열)로 잘 인식된 것을 볼 수 있습니다.
    * `df.shape`: 데이터프레임의 **행과 열의 개수**를 튜플 형태로 반환하는 `shape` 속성을 정확히 사용하여 데이터셋의 크기를 확인했습니다. (3행, 3열)
    * `df.describe()`: 숫자형 컬럼(`Age`)에 대한 **기본 통계 요약 정보**를 제공하는 `describe()` 메서드를 올바르게 사용했습니다. `count`, `mean`, `std`, `min`, `max`, 분위수(25%, 50%, 75%) 등 핵심 통계량을 한눈에 확인할 수 있습니다.

이 풀이는 Pandas DataFrame을 처음 다룰 때 가장 기본적이면서도 필수적인 탐색 과정을 정확하게 보여주는 모범적인 예시입니다. 데이터를 받으면 가장 먼저 해봐야 할 작업들을 모두 수행했습니다.
"""

# --- [모범 답안] ---
# 이미 '최초 나의 코딩'에서 모범적으로 해결되었으므로, 추가적인 모범 답안은 생략합니다.
# 코드의 가독성과 출력 메시지의 명확성을 유지하는 것이 중요합니다.

# --- [학습 기록] ---
"""
**학습 질문**: Pandas DataFrame을 생성하고, 그 안에 담긴 데이터의 기본 구조와 요약 통계를 어떻게 빠르게 파악할 수 있을까? 어떤 메서드들이 초기에 데이터를 탐색하는 데 유용할까?

**문제 해결**:
1.  **DataFrame 생성**: 파이썬 딕셔너리를 사용하여 컬럼 이름(키)과 해당 데이터(값 리스트)를 정의한 후, `pd.DataFrame()` 함수에 전달하여 `df`라는 DataFrame을 생성했습니다. 이 방식은 구조화된 데이터를 DataFrame으로 변환하는 일반적인 방법입니다.
2.  **데이터프레임 출력 (`print(df)`)**: 생성된 DataFrame 전체를 직접 출력하여 데이터의 내용과 형식을 즉시 확인했습니다.
3.  **상위 행 확인 (`df.head(n)`)**: `df.head(2)`를 사용하여 데이터프레임의 가장 위에 있는 2개의 행을 출력했습니다. 이 메서드는 대규모 데이터셋의 경우 모든 데이터를 출력하는 대신 데이터의 구조와 일부 내용을 빠르게 훑어볼 때 매우 유용합니다.
4.  **데이터 타입 확인 (`df.dtypes`)**: `df.dtypes` 속성을 사용하여 각 컬럼이 어떤 종류의 데이터를 담고 있는지(예: `int64`는 정수, `object`는 문자열) 확인했습니다. 데이터 타입은 향후 데이터 분석이나 연산의 가능 여부를 판단하는 데 중요합니다.
5.  **데이터프레임 크기 확인 (`df.shape`)**: `df.shape` 속성을 사용하여 데이터프레임의 '행의 개수'와 '열의 개수'를 튜플 형태(예: `(3, 3)`은 3행 3열)로 확인했습니다. 이는 데이터셋의 규모를 파악하는 데 필수적입니다.
6.  **기본 통계 정보 확인 (`df.describe()`)**: `df.describe()` 메서드를 사용하여 숫자형 컬럼(`Age`)에 대한 주요 통계 요약(개수, 평균, 표준편차, 최솟값, 최댓값, 사분위수 등)을 한눈에 파악했습니다. 이는 데이터의 분포와 특성을 이해하는 데 큰 도움이 됩니다.

**추가 학습**:
* **Pandas DataFrame 생성 방법**: 딕셔너리 외에도 리스트의 리스트(rows), NumPy 배열 등 다양한 방식으로 DataFrame을 생성할 수 있습니다.
* **`df.info()`**: `df.info()` 메서드는 `dtypes`와 `shape` 정보를 포함하여, 각 컬럼의 Non-Null 값의 개수와 메모리 사용량까지 보여줍니다. 이는 데이터의 결측치 여부와 전반적인 메모리 효율성을 빠르게 파악하는 데 `describe()`와 함께 매우 유용합니다.
* **`df.columns` / `df.index`**: 데이터프레임의 컬럼 이름 리스트(`df.columns`)나 인덱스 이름 리스트(`df.index`)를 확인할 때 사용합니다.
* **[공인회계사 업무 관련 추가 학습]**:
    데이터프레임 생성 및 기본 정보 확인은 공인회계사(CPA)가 재무 및 감사 데이터 분석을 시작할 때 **가장 먼저 수행해야 하는 필수적인 첫 단계**입니다.

    * **데이터 유효성 초기 검토**:
        * `df.head()`를 통해 데이터를 훑어보며 예상했던 형식과 내용이 맞는지 **육안으로 빠르게 검토**합니다. 예를 들어, 계정 코드나 금액이 올바른 형식으로 들어왔는지 확인합니다.
        * `df.dtypes`를 통해 숫자여야 할 컬럼(예: 금액, 수량)이 `object`로 인식되지는 않았는지 확인합니다. 만약 그렇다면 데이터 불러오기 과정에서 오류가 있었거나, 문자열이 섞여 있을 가능성이 있으므로 추가적인 데이터 정제가 필요함을 알 수 있습니다. **이는 재무 데이터의 계산 오류를 방지하는 중요한 단계입니다.**
        * `df.shape`를 통해 **데이터 건수**가 예상했던 총 거래 건수와 일치하는지 확인합니다. 이는 데이터 누락 여부를 판단하는 초기 지표가 될 수 있습니다.

    * **재무 데이터 요약 및 이상치 탐지**:
        * `df.describe()`는 **수치형 재무 데이터(예: 매출액, 비용, 자산 가치)**의 평균, 표준편차, 최솟값, 최댓값 등을 한눈에 보여줍니다.
        * 이를 통해 **데이터 분포의 개략적인 모습**을 파악하고, 극단적인 값(최솟값, 최댓값)을 통해 잠재적인 **이상치(Outlier)**를 초기 단계에서 탐지할 수 있습니다. 예를 들어, 매출액 컬럼의 `max` 값이 비정상적으로 높거나 낮다면 특정 거래에 대한 추가 조사가 필요할 수 있습니다. **이는 감사 절차에서 중요한 리스크 평가 요소가 됩니다.**
        * `count`를 통해 결측치(NaN)가 있는지 간접적으로 확인할 수 있습니다. `count`가 `shape`의 행 수보다 적다면 해당 컬럼에 결측치가 있다는 의미입니다.

    결론적으로, 이 초기 탐색 과정은 CPA가 **데이터를 신뢰할 수 있는지, 어떤 전처리 작업이 필요한지, 그리고 어떤 종류의 분석을 수행할 수 있을지 결정하는 데 기초적인 통찰력을 제공하는 첫 번째이자 핵심적인 단계**입니다.
"""
