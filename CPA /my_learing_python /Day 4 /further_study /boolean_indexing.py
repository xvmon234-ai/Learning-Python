# ==============================================================================
# [문제 4.4] 추가 학습: 불리언 인덱싱의 원리 및 CPA 활용
# ==============================================================================

# 데이터 준비 예시
# (이론 설명을 위한 데이터로, 문제 4.3의 데이터와 동일합니다.)
students_data = """StudentID,Name,Math,English,Grade
S001,Alice,90,85,A
S002,Bob,78,80,B
S003,Charlie,95,92,A
S004,David,60,70,C
"""
df_students = pd.read_csv(StringIO(students_data)).set_index("StudentID")

print("--- 예시 DataFrame (df_students) ---")
print(df_students)

# 핵심 이론: 불리언 인덱싱 (Boolean Indexing)
"""
Pandas에서 데이터를 필터링하는 가장 강력하고 유연한 방법 중 하나는 **불리언 인덱싱 (Boolean Indexing)**입니다. 이는 특정 조건을 만족하는 행(또는 열)만을 선택할 때 사용됩니다.

**원리**:
1.  **조건식 생성**: 먼저, DataFrame의 특정 컬럼에 대해 조건을 적용하여 `True` 또는 `False` 값으로 이루어진 `Series`를 생성합니다. 이 `Series`의 인덱스는 원본 DataFrame의 인덱스와 동일해야 합니다.
    * 예: `df_students["Math"] >= 80`
        * 이 연산의 결과는 각 학생의 'Math' 점수가 80점 이상인지 여부를 나타내는 `True/False` Series가 됩니다.
        * `S001: True, S002: False, S003: True, S004: False`

2.  **불리언 Series 적용**: 이렇게 생성된 불리언 Series를 원본 DataFrame의 대괄호 `[]` 안에 넣어줍니다.
    * 예: `df_students[df_students["Math"] >= 80]`
        * Pandas는 이 불리언 Series를 사용하여 `True`에 해당하는 행들만 선택하여 새로운 DataFrame을 반환합니다. `False`에 해당하는 행은 결과에서 제외됩니다.

**주요 특징**:
* **유연성**: 숫자, 문자열, 날짜 등 다양한 데이터 타입에 조건을 적용할 수 있습니다.
* **직관성**: 조건식을 자연어처럼 작성할 수 있어 코드의 가독성이 높습니다.
* **다중 조건**: `&` (AND), `|` (OR), `~` (NOT) 연산자를 사용하여 여러 조건을 조합할 수 있습니다. 이때 각 개별 조건은 반드시 소괄호 `()`로 묶어야 합니다.

**왜 중요한가?**:
실제 데이터 분석에서는 특정 기준을 만족하는 데이터만을 추출하여 분석하는 경우가 대부분입니다. 불리언 인덱싱은 이러한 '조건부 선택'을 매우 효율적이고 강력하게 수행할 수 있게 해주므로, 데이터 탐색, 클리닝, 분석의 핵심적인 기술입니다.
"""

# 불리언 Series 생성 과정 이해 및 적용
math_condition = df_students["Math"] >= 80
print("\n--- 'Math' 점수 80점 이상 조건 (불리언 Series) 생성 ---")
print(math_condition)
print(f"타입: {type(math_condition)}")

# 불리언 Series를 이용한 필터링
filtered_students = df_students[math_condition]
print("\n--- 불리언 Series를 적용하여 필터링된 학생들 (수학 80점 이상) ---")
print(filtered_students)

# 다른 조건 예시: Grade가 'A'인 학생
grade_A_students = df_students[df_students["Grade"] == "A"]
print("\n--- 'Grade'가 'A'인 학생들 필터링 ---")
print(grade_A_students)

# 다중 조건 필터링 예시 (수학 80점 이상이면서 등급이 'A'인 학생)
multi_condition_students = df_students[(df_students["Math"] >= 80) & (df_students["Grade"] == "A")]
print("\n--- 수학 80점 이상 & 등급 'A'인 학생들 필터링 ---")
print(multi_condition_students)


print("\n[공인회계사(CPA) 업무와의 관련성]:")
"""
Pandas의 **불리언 인덱싱을 활용한 단일 조건 필터링**은 공인회계사(CPA)가
**대량의 재무 및 운영 데이터에서 특정 기준을 충족하는 정보를 신속하게 식별하고 추출**하는 데 매우 필수적인 기능입니다.
이는 감사 절차, 재무 분석, 데이터 검증 등 다양한 업무에 활용됩니다.

* **매출/비용의 유의성 검토**:
    * **활용**: 특정 금액(예: 100만 원)을 초과하는 **고액의 매출 또는 비용 거래**만 필터링하여 검토할 때 사용합니다. `df_transactions[df_transactions['Amount'] >= 1000000]`와 같이 필터링하여 잠재적 위험 거래를 집중적으로 확인합니다.
    * **의미**: CPA는 이를 통해 내부 통제상의 허점이나 부정의 가능성을 탐지하고, 중요성에 기반한 감사 접근 방식을 적용할 수 있습니다.

* **특정 조건 만족하는 계약/자산 식별**:
    * **활용**: '계약 종료일'이 특정 날짜(예: 이번 분기 말) 이전에 도래하는 계약들만 필터링하거나, '자산의 장부가치'가 일정 금액 이상인 유형 자산만 추출하여 **재평가 필요성 또는 손상 징후**를 파악합니다.
    * **의미**: `df_contracts[df_contracts['EndDate'] < '2025-03-31']` 또는 `df_assets[df_assets['Book_Value'] > 500000]` 와 같이 사용하여 관련 회계 처리의 적절성을 검토합니다.

* **재고 또는 채권의 건전성 평가**:
    * **활용**: '재고 평가액'이 일정 기준 이하로 떨어지는 품목이나, '미수금 회수 기한'이 지난 채권들만 필터링하여 **재고 자산의 진부화 또는 채권의 회수 불능 가능성**을 평가합니다.
    * **의미**: 이는 충당금 설정 등 관련 회계 추정의 적정성을 검토하는 데 중요한 데이터를 제공합니다.

* **특정 부서/사업부의 성과 분석**:
    * **활용**: 특정 '부서 코드'에 해당하는 데이터만 필터링하여 해당 부서의 손익이나 비용 구조를 심층적으로 분석합니다.
    * **의미**: `df_expenses[df_expenses['Department_Code'] == 'SALES']`와 같이 사용함으로써, CPA는 부서별 성과를 평가하고 효율성을 증대시킬 방안을 모색할 수 있습니다.

결론적으로, 불리언 인덱싱을 통한 단일 조건 필터링은 CPA가 **정의된 기준에 따라 대량의 데이터에서 핵심적인 정보를 선별적으로 추출하고, 이를 기반으로 재무 분석, 감사 위험 평가, 회계 처리의 적정성 검토 등 다양한 실무를 수행하는 데 필수적인 기초 데이터 핸들링 기술**입니다.
"""
