# ==============================================================================
# [문제 4.6] 추가 학습: 텍스트 및 범주형 데이터 필터링 심화와 CPA 활용
# ==============================================================================

# 데이터 준비 예시
# (이론 설명을 위한 데이터로, 이전 문제의 데이터를 재사용하고 'Bonus' 컬럼을 추가합니다.)
employees_data_for_4_6 = """EmployeeID,Name,Department,Salary
E001,John,HR,60000
E002,Jane,IT,75000
E003,Mike,IT,65000
E004,Sarah,HR,80000
E005,David,IT,90000
"""
df_employees_4_6 = pd.read_csv(StringIO(employees_data_for_4_6))
df_employees_4_6["Bonus"] = df_employees_4_6["Salary"] * 0.1 # Bonus 컬럼 추가

print("--- 예시 DataFrame (df_employees_4_6) ---")
print(df_employees_4_6)

# 핵심 이론 1: `str.contains()`를 이용한 문자열 포함 필터링
"""
`str.contains()` 메서드는 Pandas Series의 문자열(string) 데이터를 대상으로 특정 부분 문자열(substring)이나 정규 표현식(regular expression)이 포함되어 있는지 여부를 확인하여 불리언 Series를 반환합니다. 이 불리언 Series를 사용하여 DataFrame을 필터링할 수 있습니다.

**주요 특징 및 사용법**:

1.  **문자열 Series에만 적용**:
    * `df['컬럼명'].str.contains(패턴)` 형태로 사용합니다. `str` 접근자는 해당 Series가 문자열 메서드를 사용할 수 있도록 해주는 특별한 속성입니다.

2.  **패턴 검색**:
    * **단순 부분 문자열**: `str.contains('keyword')`와 같이 직접 검색할 문자열을 인자로 넘길 수 있습니다. 이 경우 해당 문자열이 정확히 포함된 요소를 찾습니다.
    * **정규 표현식 (Regular Expression)**: 더 복잡하고 유연한 패턴을 검색하고 싶을 때는 정규 표현식 문법을 사용할 수 있습니다. 예를 들어, `str.contains('pattern1|pattern2')`는 'pattern1' 또는 'pattern2' 중 하나라도 포함된 경우를 찾습니다. 이는 여러 OR 조건을 효과적으로 처리하는 데 유용합니다.

3.  **대소문자 구분 (`case` 파라미터)**:
    * `case=True` (기본값): 대소문자를 엄격히 구분하여 검색합니다. 예를 들어, 'apple'을 찾을 때 'Apple'은 찾지 않습니다.
    * `case=False`: 대소문자를 무시하고 검색합니다. 예를 들어, 'apple'을 검색할 때 'Apple'도 함께 찾습니다. 이는 사용자 입력이나 비정형 텍스트 데이터를 다룰 때 유용합니다.

4.  **결측치 처리 (`na` 파라미터)**:
    * `na=False` (기본값): Series 내에 결측치(NaN)가 있는 경우, 해당 위치의 불리언 값은 `False`로 처리됩니다.
    * `na=True`: 결측치를 `True`로 처리합니다.
    * `na=None`: 결측치를 그대로 `NaN`으로 둡니다.

**왜 중요한가?**:
텍스트 기반의 데이터(예: 계정과목명, 제품 설명, 거래처명, 감사 의견)에서 특정 키워드나 패턴을 찾아내야 할 때 매우 유용합니다. 이는 데이터 클리닝, 분류, 특정 유형의 거래 식별 등에 필수적인 도구입니다. 예를 들어, 특정 비용 항목의 상세 내역에서 '광고' 또는 '홍보' 관련 지출만을 필터링하는 경우에 활용됩니다.
"""

# `str.contains()` 사용 예시
# 이름에 'a' 또는 'A'가 포함된 직원 (대소문자 무시)
filtered_name_contains = df_employees_4_6[df_employees_4_6["Name"].str.contains("a", case=False)]
print("\n--- 이름에 'a' 또는 'A'가 포함된 직원 (`str.contains()`) ---")
print(filtered_name_contains)

# `str.contains()` 정규표현식 활용 예시
# 이름에 'o' 또는 'a'가 포함된 직원 (대소문자 무시)
filtered_name_regex = df_employees_4_6[df_employees_4_6["Name"].str.contains("o|a", case=False)]
print("\n--- 이름에 'o' 또는 'a'가 포함된 직원 (정규표현식 `o|a`) ---")
print(filtered_name_regex)


# 핵심 이론 2: `isin()`을 이용한 목록 포함 필터링
"""
`isin()` 메서드는 Pandas Series의 각 요소가 주어진 리스트(또는 다른 Series, set) 안에 포함되어 있는지 여부를 확인하여 불리언 Series를 반환합니다. 즉, '값이 여러 후보 값 중 하나에 속하는가?'를 효율적으로 검사할 때 사용합니다.

**주요 특징 및 사용법**:

1.  **리스트 형태의 인자**:
    * `df['컬럼명'].isin(리스트_또는_집합)` 형태로 사용하며, `isin()` 메서드의 인자로는 반드시 **확인하고자 하는 값들을 담은 iterable 객체(주로 리스트)**를 전달해야 합니다. (예: `['HR', 'Finance']`).
    * 단일 값만 전달하면 TypeError가 발생할 수 있습니다.

2.  **다중 OR 조건의 효율적인 처리**:
    * 특정 컬럼의 값이 '값1'이거나 '값2'이거나 '값3'인 경우를 필터링해야 할 때, 다음과 같이 여러 OR 조건을 연결하는 것보다:
        `df['컬럼'] == '값1' | df['컬럼'] == '값2' | df['컬럼'] == '값3'`
    * `isin()`을 사용하는 것이 코드를 훨씬 간결하고 효율적으로 만듭니다:
        `df['컬럼'].isin(['값1', '값2', '값3'])`
    * 특히 후보 값의 개수가 많아질수록 `isin()`의 가독성과 성능 이점이 커집니다.

**왜 중요한가?**:
범주형 데이터(예: 부서명, 제품 카테고리, 거래 상태, 지역 코드)에서 특정 그룹에 속하는 데이터를 한 번에 필터링해야 할 때 매우 유용합니다. 이는 특정 부서의 실적 분석, 특정 제품군의 판매 동향 파악, 또는 특정 상태의 거래 목록을 조회하는 데 활용됩니다.
"""

# `isin()` 사용 예시
# 'Department'가 'HR' 또는 'Finance'인 직원
filtered_by_dept_isin = df_employees_4_6[df_employees_4_6["Department"].isin(["HR", "Finance"])]
print("\n--- 'HR' 또는 'Finance' 부서 직원 (`isin()`) ---")
print(filtered_by_dept_isin)

# `isin()`과 논리 연산자 결합 예시
# Department가 'HR' 또는 'IT'이면서 Salary가 70000 미만인 직원
filtered_dept_salary = df_employees_4_6[
    (df_employees_4_6["Department"].isin(["HR", "IT"])) &
    (df_employees_4_6["Salary"] < 70000)
]
print("\n--- 'HR' 또는 'IT' 부서이면서 급여 7만 미만인 직원 (isin() & 논리 연산자) ---")
print(filtered_dept_salary)


print("\n[공인회계사(CPA) 업무와의 관련성]:")
"""
Pandas의 `str.contains()`를 사용한 **문자열 포함 필터링**과 `isin()`을 사용한 **목록 포함 필터링**은
공인회계사(CPA)가 **텍스트 기반의 데이터나 범주형 데이터에서 특정 패턴이나 그룹에 속하는 정보를 효율적으로 식별하고 추출**하는 데 매우 유용합니다.

* **`str.contains()` 활용 (텍스트 패턴 분석)**:
    * **활용**: **계정과목명, 거래처명, 제품명, 감사 의견, 계약 조항** 등 텍스트 기반의 데이터에서 **특정 키워드(예: '수수료', '보험', '지점', '수선', '관계회사', '특수관계인')가 포함된 거래**를 필터링하여 검토합니다. `df_gl[df_gl['Account_Name'].str.contains('수수료', case=False)]`와 같이 사용하여 특정 비용의 상세 내역을 파악하거나, 관련 계정의 적정성을 검토할 수 있습니다.
    * **의미**: CPA는 이를 통해 특정 유형의 거래를 식별하여 감사 범위를 좁히거나, 특정 비용의 발생 원인을 분석하는 데 활용합니다. 예를 들어, '광고선전비' 계정 내에서 '온라인' 또는 '디지털'이라는 키워드가 포함된 지출만 따로 분석하여 마케팅 효율성을 평가하는 경우입니다. 또한, 감사보고서 초안에서 특정 위험 키워드를 찾아 검토할 때도 유용합니다.

* **`isin()` 활용 (범주형 그룹 분석)**:
    * **활용**: **특정 부서(예: '영업부', '마케팅부'), 특정 프로젝트 코드(예: 'PJT_A', 'PJT_B'), 또는 특정 지역(예: '서울', '부산')**에 해당하는 데이터만 필터링하여 분석합니다. `df_expenses[df_expenses['Department'].isin(['영업부', '마케팅부'])]`와 같이 사용합니다.
    * **의미**: CPA는 이를 통해 특정 조직 단위의 성과를 평가하거나, 특정 유형의 거래(예: 관계회사와의 거래, 특정 중요 자산의 거래)만을 추출하여 독립성 및 공정성 여부를 검토하는 등 **그룹 기반의 분석**을 수행할 수 있습니다. 이는 재무제표 주석 작성이나 특정 감사 절차 수행 시 매우 효율적인 방법입니다.

* **데이터 클리닝 및 유효성 검사**:
    * **활용**: `str.contains()`를 사용하여 특정 컬럼에 **예상치 못한 문자열 패턴(예: 잘못된 형식의 코드, 특수 문자 포함)**이 있는지 확인하고, `isin()`을 사용하여 특정 컬럼의 값이 **정의된 유효한 목록(예: '승인', '거절', '보류'와 같은 상태값)** 내에 있는지 검증하여 데이터 품질을 향상시킵니다.
    * **의미**: 이는 데이터의 정확성과 일관성을 확보하여 이후 재무 분석의 신뢰성을 높이는 데 기여합니다. 예를 들어, 거래 상태 컬럼에 '완료', '대기', '취소' 외의 다른 값이 있는지 검사하여 데이터 입력 오류를 찾아낼 수 있습니다.

결론적으로, `str.contains()`와 `isin()`은 CPA가 **텍스트 및 범주형 데이터를 기반으로 복잡한 필터링을 수행하고, 특정 감사 목적에 맞는 정보를 효율적으로 추출하며, 데이터의 품질을 검증하는 데 필수적인 고급 데이터 조작 기술**입니다.
"""
