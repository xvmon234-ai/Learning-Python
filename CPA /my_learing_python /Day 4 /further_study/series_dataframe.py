# ==============================================================================
# [문제 4.1] 추가 학습: Series와 DataFrame의 기본 이해 및 CPA 활용
# ==============================================================================

# 데이터 준비 예시
# (이론 설명을 위한 데이터로, 실제 문제 4.1의 데이터와 동일합니다.)
products_data = """OrderID,Product,Quantity,Price
1,Laptop,1,1200
2,Mouse,2,25
3,Keyboard,1,75
4,Monitor,1,300
"""
df_products = pd.read_csv(StringIO(products_data))

print("--- 예시 DataFrame (df_products) ---")
print(df_products)
print("\n--- DataFrame 정보 ---")
df_products.info()

# Series 객체 이해
# DataFrame에서 단일 컬럼을 선택하면 Series 객체가 반환됩니다.
# Series는 1차원 배열과 유사하며, 인덱스와 값으로 구성됩니다.
product_series = df_products["Product"]
print("\n--- 'Product' 컬럼 (Series 객체) ---")
print(product_series)
print("\n--- Series 정보 ---")
product_series.info()

# DataFrame 객체 이해
# DataFrame은 2차원 테이블 형태의 데이터 구조로, 여러 개의 Series가 모여 컬럼을 이룹니다.
# 엑셀 시트나 데이터베이스 테이블과 유사하다고 생각할 수 있습니다.
# DataFrame에서 여러 컬럼을 선택하거나, 이중 대괄호 `[[]]`를 사용하여 단일 컬럼을 선택해도 DataFrame이 반환됩니다.
product_df_from_single_column = df_products[["Product"]]
print("\n--- 'Product' 컬럼 (DataFrame 객체 - 이중 대괄호 사용) ---")
print(product_df_from_single_column)
print("\n--- DataFrame 정보 (단일 컬럼 선택) ---")
product_df_from_single_column.info()

print("\n[핵심 이론]:")
"""
Pandas의 `Series`와 `DataFrame`은 데이터를 다루는 데 있어 가장 기본적인 두 가지 핵심 자료구조입니다.

1.  **Series (시리즈)**:
    * **정의**: 1차원 배열(array-like) 형태의 데이터 구조입니다. 각 값에 고유한 인덱스(index) 라벨이 붙어 있습니다.
    * **특징**:
        * 단일 데이터 타입(homogeneous)을 가집니다. (예: 숫자만, 문자열만)
        * 데이터와 인덱스로 구성됩니다. 인덱스는 기본적으로 0부터 시작하는 정수이지만, 사용자 정의 라벨(문자열 등)을 가질 수도 있습니다.
        * DataFrame의 한 개의 컬럼은 Series 객체로 간주될 수 있습니다.
    * **예시**: 특정 학생들의 수학 점수 목록, 특정 날짜별 주가 변동 목록 등.

2.  **DataFrame (데이터프레임)**:
    * **정의**: 2차원 테이블 형태의 데이터 구조입니다. 행(row)과 열(column)으로 구성되며, 각 열은 Series 객체라고 볼 수 있습니다.
    * **특징**:
        * 여러 데이터 타입(heterogeneous)을 가질 수 있습니다. 각 컬럼은 서로 다른 데이터 타입을 가질 수 있습니다.
        * 행을 식별하는 인덱스(index)와 열을 식별하는 컬럼 이름(column name)을 가집니다.
        * 관계형 데이터베이스의 테이블이나 스프레드시트와 유사하게 데이터를 구조화합니다.
    * **예시**: 직원 정보 테이블(이름, 부서, 급여), 회사의 재무제표(매출, 비용, 이익) 등.

**Series와 DataFrame 간의 관계**:
* DataFrame은 여러 개의 Series가 컬럼 형태로 나란히 놓여 있는 구조라고 이해할 수 있습니다.
* DataFrame에서 단일 컬럼을 선택할 때는 `df['컬럼명']`과 같이 사용하며, 이 경우 반환되는 것은 Series 객체입니다.
* 반면, `df[['컬럼명']]`과 같이 이중 대괄호를 사용하면, 단일 컬럼을 선택하더라도 여전히 DataFrame 객체가 반환됩니다. 이는 여러 컬럼을 선택하는 `df[['컬럼1', '컬럼2']]`와 일관된 방식입니다.

**왜 중요한가?**:
이 두 자료구조를 명확히 이해하는 것은 Pandas를 이용한 데이터 분석의 기초입니다. 어떤 작업을 할 때 Series가 반환되는지, DataFrame이 반환되는지를 알아야 다음 분석 단계를 올바르게 계획하고 오류를 피할 수 있습니다.
"""

print("\n[공인회계사(CPA) 업무와의 관련성]:")
"""
Pandas의 `Series`와 `DataFrame`에 대한 명확한 이해는 공인회계사(CPA)가 **방대한 재무 데이터를 효율적으로 구조화하고 분석하는 데 필수적인 기초 지식**입니다.

* **데이터 구조화 및 관리**:
    * **DataFrame**: 회사의 **총계정원장(General Ledger), 판매 데이터, 급여 명세서** 등 복잡한 재무 및 운영 데이터를 `DataFrame` 형태로 로드하고 관리하는 데 사용됩니다. 각 계정과목, 거래처, 직원 등은 행(row)으로, 관련 속성(금액, 날짜, 부서 등)은 열(column)으로 구성하여 직관적으로 데이터를 파악하고 조작할 수 있습니다.
    * **Series**: 특정 계정의 잔액 추이(`df_gl['Account_Balance']`), 특정 제품의 월별 판매량(`df_sales['Monthly_Sales']`) 등 **단일 속성의 시계열 데이터나 목록**을 분석할 때 `Series`의 특성을 활용합니다. 예를 들어, 특정 비용 계정의 월별 변동성을 분석하여 이상 징후를 파악할 수 있습니다.

* **데이터 추출 및 보고서 작성의 효율성**:
    * CPA는 감사 또는 재무 분석 보고서를 작성할 때, 원본 데이터에서 필요한 특정 정보(예: 특정 기간의 매출액, 특정 거래처의 미수금)만을 추출해야 합니다. `DataFrame`에서 특정 컬럼(Series)을 선택하거나, 여러 컬럼을 선택하여 새로운 `DataFrame`을 만드는 과정은 이러한 데이터 추출 작업을 매우 효율적으로 만듭니다.
    * 예를 들어, `df_financials[['Revenue', 'Cost_of_Goods_Sold', 'Net_Income']]`와 같이 손익계산서의 핵심 항목들만 추출하여 요약 보고서를 생성할 수 있습니다.

* **데이터 품질 검증**:
    * `DataFrame.info()`를 사용하여 각 컬럼(Series)의 데이터 타입과 결측치 여부를 확인하는 것은 데이터 품질 검증의 첫 단계입니다. 예를 들어, '매출액' 컬럼이 숫자가 아닌 문자열로 로드되었거나 결측치가 많다면, 이는 이후 계산 오류로 이어질 수 있으므로 사전에 파악하고 처리해야 합니다.

* **재무 모델링의 기초**:
    * 재무 모델링 시 각 재무제표 항목(매출, 비용, 자산, 부채 등)을 Series 형태로 가정하고, 이들을 조합하여 DataFrame을 구성하는 방식으로 모델을 구축할 수 있습니다. 이는 복잡한 재무 예측 및 분석을 체계적으로 수행하는 데 기여합니다.

결론적으로, `Series`와 `DataFrame`은 CPA가 **대규모의 비정형/반정형 재무 데이터를 정형화하고, 필요한 정보를 추출하며, 데이터의 건전성을 검증하고, 나아가 복잡한 재무 분석 및 보고서 작성을 수행하는 데 있어 가장 근본적이고 강력한 도구**입니다.
"""
