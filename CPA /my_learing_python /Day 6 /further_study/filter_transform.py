# ==============================================================================
# [FURTHER STUDY] Pandas groupby().filter() vs groupby().transform() 심화
# ==============================================================================

# --- [학습 목표] ---
"""
Pandas의 `groupby().filter()`와 `groupby().transform()` 메서드의
명확한 차이점과 각각의 활용 목적을 심층적으로 이해합니다.
특히, 공인회계사 업무와 관련된 실제 데이터 분석 시나리오에서
두 메서드가 어떻게 다르게 적용될 수 있는지 구체적인 예시를 통해 파악합니다.
"""

# --- [filter()와 transform()의 핵심 차이점 심화] ---
"""
`groupby()` 연산 후 데이터를 조작하는 방법에는 여러 가지가 있지만,
`filter()`와 `transform()`은 특히 그 목적과 반환 형태에서 중요한 차이를 가집니다.

1.  **`filter()`: 그룹 '전체'를 선택하거나 버리기**
    * **목적**: 특정 조건을 만족하는 **그룹 자체를 통째로 유지하거나 제거**하는 데 사용됩니다. 그룹 내 개별 행이 아닌, **그룹 전체의 특성**을 기준으로 필터링할 때 유용합니다.
    * **작동 방식**: `filter()`에 전달되는 함수는 각 그룹(DataFrame 또는 Series 형태)을 인자로 받아, 해당 그룹을 유지할지 버릴지 결정하는 `True` 또는 `False`를 반환해야 합니다. 만약 함수가 `True`를 반환하면 그 그룹에 속한 **모든 원본 행**이 결과에 포함됩니다.
    * **반환 형태**: **원본 DataFrame과 동일한 구조와 형태**를 가진 DataFrame을 반환합니다. 단, 필터링 조건에 의해 일부 그룹의 행들이 제거될 수 있습니다.
    * **핵심**: "이 그룹은 내가 원하는 조건을 충족하는가? 그렇다면 이 그룹의 모든 데이터를 가져와라."

2.  **`transform()`: 그룹 '정보'를 '개별' 데이터에 매핑하기**
    * **목적**: 그룹별로 계산된 통계량(평균, 합계, 표준편차 등)을 **원본 DataFrame의 각 개별 행에 그대로 매핑**하거나, 그룹 기반으로 개별 값을 변환하여 **새로운 컬럼을 생성**하는 데 사용됩니다.
    * **작동 방식**: `transform()`에 전달되는 함수는 각 그룹(DataFrame 또는 Series 형태)을 인자로 받아 연산을 수행합니다. 이 연산의 결과는 **원본 DataFrame의 길이(인덱스)와 동일한 Series**여야 합니다. 이 결과 Series는 새로운 컬럼으로 추가되거나 기존 컬럼을 덮어쓰는 데 사용됩니다.
    * **반환 형태**: **원본 DataFrame의 인덱스를 유지하고 길이가 같은 Series**를 반환합니다.
    * **핵심**: "이 개별 데이터가 속한 그룹의 평균은 무엇인가? 그 평균값을 이 개별 데이터 옆에 붙여줘라." 또는 "이 개별 데이터는 자기 그룹 평균보다 얼마나 다른가? 그 차이 값을 계산해서 붙여줘라."
"""

# --- [예시 데이터프레임] ---
example_df = pd.DataFrame({
    'Branch': ['A', 'B', 'A', 'C', 'B', 'A', 'C'],
    'Product': ['X', 'Y', 'Z', 'X', 'Y', 'X', 'Z'],
    'Sales': [100, 150, 200, 50, 120, 180, 220],
    'Cost': [50, 80, 100, 30, 60, 90, 110]
})
print("--- 원본 DataFrame (example_df) ---")
print(example_df)

# --- [filter() 예시] ---
print("\n--- filter() 예시: Branch별 총 매출이 400 이상인 Branch만 선택 ---")
# Branch 'A' (100+200+180 = 480) -> 조건 만족
# Branch 'B' (150+120 = 270) -> 조건 불만족
# Branch 'C' (50+220 = 270) -> 조건 불만족

filtered_df = example_df.groupby('Branch').filter(lambda x: x['Sales'].sum() >= 400)
print(filtered_df)
# 결과 해석: 'Branch A'에 속하는 모든 행만 필터링되어 반환됩니다.

# --- [transform() 예시] ---
print("\n--- transform() 예시: Branch별 평균 Sales를 'Avg_Branch_Sales' 컬럼으로 추가 ---")
# Branch 'A' 평균 Sales: (100+200+180)/3 = 160
# Branch 'B' 평균 Sales: (150+120)/2 = 135
# Branch 'C' 평균 Sales: (50+220)/2 = 135

example_df['Avg_Branch_Sales'] = example_df.groupby('Branch')['Sales'].transform('mean')
example_df['Sales_Deviation_from_Branch_Avg'] = example_df['Sales'] - example_df['Avg_Branch_Sales']
print(example_df)
# 결과 해석: 각 행에 해당 행의 'Branch'에 속하는 'Sales'의 평균값이 새로운 컬럼으로 추가됩니다.
#           이를 이용해 개별 매출액이 해당 Branch 평균과 얼마나 차이 나는지도 계산할 수 있습니다.

# --- [공인회계사 업무와의 관련성 심화] ---
"""
공인회계사는 기업의 재무 상태를 분석하고, 내부 통제 시스템을 평가하며,
감사 절차를 수행하는 과정에서 방대한 데이터를 다룹니다.
`filter()`와 `transform()`은 이러한 업무에 필수적인 데이터 전처리 및 분석 도구입니다.

1.  **`filter()`의 활용 (그룹 단위의 조건부 검토)**:
    * **이상 징후 그룹 식별**:
        * **예시**: 각 부서별 **평균 경비율**이 업계 평균 또는 특정 임계치를 **초과하는 부서만 선별**하여 추가적인 조사 대상으로 삼을 수 있습니다.
            `df.groupby('부서')['경비'].filter(lambda x: x.sum() / x['매출액'].sum() > 0.30)` (경비율 30% 초과 부서)
        * **예시**: 특정 **거래처의 반품률**이 전체 평균보다 현저히 높은 경우, 해당 거래처와의 모든 거래 내역을 한 번에 검토하기 위해 필터링합니다.
            `df.groupby('거래처ID')['반품여부'].filter(lambda x: x.mean() > 0.10)` (반품률 10% 초과 거래처)
    * **내부 통제 미준수 그룹**: 특정 내부 통제 절차(예: 결재 금액 한도 준수)를 위반했을 가능성이 있는 팀이나 프로젝트 그룹을 식별하여 감사 범위를 좁힙니다.
        `df.groupby('팀')['결재금액'].filter(lambda x: x.max() > 1000000)` (최대 결재 금액이 100만원을 초과한 팀)

2.  **`transform()`의 활용 (개별 항목의 그룹 대비 분석)**:
    * **성과/효율성 분석**:
        * **예시**: 각 영업사원의 매출액이 **본인이 속한 팀의 평균 매출액 대비 얼마나 높거나 낮은지** 편차를 계산하여, 특정 영업사원의 성과를 팀 내에서 상대적으로 평가합니다.
            `df['팀내_매출_편차'] = df.groupby('팀')['매출액'].transform(lambda x: x - x.mean())`
        * **예시**: 특정 비용 계정의 지출이 **평균적인 월별 지출 또는 해당 계정의 과거 평균 대비** 비정상적으로 높은지 파악합니다.
            `df['월별_지출_이상치'] = df.groupby('계정코드')['지출액'].transform(lambda x: x - x.mean())`
    * **재무 비율 표준화 및 비교**:
        * **예시**: 특정 회사의 부채 비율이 **소속 산업군의 평균 부채 비율 대비** 어느 정도인지 비교하기 위한 지표를 생성합니다.
            `df['산업군_평균_부채비율'] = df.groupby('산업')['부채비율'].transform('mean')`
            `df['부채비율_상대적_위치'] = df['부채비율'] - df['산업군_평균_부채비율']`
    * **감사 샘플링 및 이상 거래 탐지**: 그룹 내에서 **통계적으로 유의미한 이상치**를 파악하여 감사 샘플을 선정하거나 의심스러운 거래를 탐지합니다 (예: Z-score를 계산하여 특정 임계치를 벗어나는 거래 식별).
        `df['Z_Score'] = df.groupby('거래유형')['금액'].transform(lambda x: (x - x.mean()) / x.std())`

**결론**:
`filter()`는 **전체 그룹 단위의 의사결정 (포함/제외)**에 적합하며, 특정 조건에 부합하는 그룹만으로 분석 대상을 좁히고자 할 때 유용합니다.
반면 `transform()`은 **개별 데이터 포인트에 그룹의 맥락을 부여**하여 새로운 파생 변수를 만들거나 기존 변수를 변환할 때 사용되며, 그룹 내에서 개별 항목의 상대적 위치나 특이성을 분석하는 데 강력합니다.

공인회계사는 이 두 메서드를 적절히 활용하여 **데이터의 건전성을 검증**하고, **이상 징후를 탐지**하며, **심층적인 재무 분석을 수행**하여 기업의 재무 상태에 대한 정확하고 신뢰성 있는 의견을 제시할 수 있습니다.
"""
