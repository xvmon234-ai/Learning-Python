# ==============================================================================
# [FURTHER STUDY] Pandas groupby().apply()의 고급 활용 및 공인회계사 업무 적용
# ==============================================================================

# --- [학습 목표] ---
"""
Pandas `groupby().apply()` 메서드의 유연성과 강력함을 심층적으로 이해하고,
특히 `filter()`, `transform()`, `agg()`로는 해결하기 어려운
'정형화되지 않은 복잡한 그룹별 분석' 시나리오에서 `apply()`가 어떻게 활용되는지 파악합니다.
공인회계사 업무와 관련된 구체적인 예시를 통해 실무 적용 능력을 향상시킵니다.
"""

# --- [apply()의 강력함: '만능 도구'로서의 역할] ---
"""
`groupby().apply()`는 Pandas 그룹 연산 메서드 중 가장 유연합니다.
`agg()`, `filter()`, `transform()`이 각각 '집계', '그룹 필터링', '개별 값 변환'이라는
명확하고 제한적인 목적을 가질 때, `apply()`는 이 세 가지 범주에 속하지 않거나
더 복잡한 로직을 그룹별로 적용해야 할 때 빛을 발합니다.

**핵심 특징:**
* **유연한 반환 타입**: `apply()`에 전달되는 함수는 Series, DataFrame, 또는 스칼라 값(단일 값) 등 어떤 형태의 결과라도 반환할 수 있습니다.
* **그룹별 사용자 정의 로직**: 각 그룹(`x`로 표현되는 DataFrame 또는 Series)에 대해 파이썬의 모든 기능을 활용한 복잡한 사용자 정의 로직을 적용할 수 있습니다.
* **원본 데이터의 맥락 유지**: `apply()` 함수 내에서 그룹 `x`는 원본 DataFrame의 구조와 인덱스를 유지하므로, 그룹 내의 다른 컬럼이나 관계를 활용한 연산이 가능합니다.
"""

# --- [예시 데이터프레임] ---
sales_transactions = pd.DataFrame({
    'CustomerID': [101, 102, 101, 103, 102, 101, 104],
    'TransactionDate': pd.to_datetime(['2023-01-10', '2023-01-15', '2023-01-20', '2023-02-01', '2023-02-05', '2023-02-10', '2023-02-12']),
    'Amount': [100, 250, 50, 300, 120, 180, 400],
    'ProductCategory': ['Electronics', 'Books', 'Electronics', 'Clothes', 'Books', 'Food', 'Electronics']
})
print("--- 원본 Transaction Data ---")
print(sales_transactions)

# --- [apply() 고급 활용 예시] ---

print("\n--- 예시 1: 고객별로 가장 최근 거래 2건 추출 ---")
# filter나 transform으로는 구현하기 까다로운, 그룹 내에서 조건에 맞는 특정 행을 추출하는 경우
latest_transactions = sales_transactions.groupby('CustomerID').apply(
    lambda x: x.sort_values(by='TransactionDate', ascending=False).head(2)
)
print(latest_transactions)
# 결과 해석: 각 고객 ID별로 거래 날짜가 가장 최근인 2개의 행(거래)이 추출됩니다.
#          MultiIndex 형태로 CustomerID와 원본 인덱스가 함께 표시됩니다.

print("\n--- 예시 2: 고객별 거래 금액의 Z-Score 계산 (transform과의 차이점 강조) ---")
# transform으로도 Z-Score를 계산할 수 있지만, apply는 더 복잡한 통계량이나 조건부 계산 가능
# Z-Score = (개별 값 - 그룹 평균) / 그룹 표준편차
sales_transactions['Amount_ZScore'] = sales_transactions.groupby('CustomerID')['Amount'].apply(
    lambda x: (x - x.mean()) / x.std()
)
print(sales_transactions[['CustomerID', 'Amount', 'Amount_ZScore']])
# 결과 해석: 각 고객의 거래 금액이 해당 고객의 평균 거래 금액에서 표준편차의 몇 배만큼 떨어져 있는지 나타냅니다.
#          Z-Score가 특정 임계치(예: 2 또는 -2)를 벗어나면 이상 거래로 간주할 수 있습니다.
#          여기서 transform을 써도 되지만, apply는 lambda 내에서 더 복잡한 로직을 포함할 수 있음을 보여줍니다.

print("\n--- 예시 3: 고객별 첫 거래와 마지막 거래 금액의 차이 계산 ---")
# 그룹 내에서 여러 통계량을 조합하여 새로운 스칼라 값 생성
first_last_diff = sales_transactions.groupby('CustomerID').apply(
    lambda x: x['Amount'].iloc[-1] - x['Amount'].iloc[0] # 마지막 거래 금액 - 첫 거래 금액
)
print(first_last_diff)
# 결과 해석: 각 고객별로 첫 거래와 마지막 거래 금액 사이의 차이를 계산합니다.

# --- [공인회계사 업무와의 관련성 심화] ---
"""
공인회계사가 **정형화되지 않은 복잡한 그룹별 분석이나 특정 조건에 따른 심층적인 데이터 발췌**를
수행해야 할 때 `groupby().apply()`는 매우 강력하고 유용한 도구입니다.

1.  **감사 표본 선정 및 이상 거래 탐지 (심층 데이터 발췌):**
    * **예시 (고액/비정상 거래 심층 검토):** 특정 계정(예: 현금, 미수금, 미지급금)에서 발생한 거래 중, **가장 큰 금액의 거래 상위 N개** 또는 **평균과 표준편차를 벗어나는 이상 거래**를 그룹별로 추출하여 상세 증빙을 검토해야 할 때 `apply().nlargest()`나 복합 조건을 활용할 수 있습니다.
        * `df.groupby('계정코드')['거래금액'].apply(lambda x: x.nlargest(5))` : 각 계정별 최고 금액 거래 5건 추출
        * `df.groupby('거래유형').apply(lambda x: x[np.abs((x['금액'] - x['금액'].mean()) / x['금액'].std()) > 3])` : 각 거래 유형 내에서 금액의 Z-score가 3을 초과하는 이상 거래 추출 (3-시그마 룰)
    * **예시 (특정 조건 만족하는 계약):** 특정 부서나 프로젝트의 계약서 중, **특정 조건(예: 특정 단어가 포함된 계약명, 금액 범위, 계약 기간)을 모두 만족하는 계약 리스트**를 뽑아낼 때 사용합니다.

2.  **내부 통제 점검 및 효율성 분석 (복잡한 그룹별 분석):**
    * **예시 (결재 시간 분석):** 각 부서별로 품의서가 **생성된 시점부터 최종 결재까지 걸린 평균 시간**을 계산하고, 이 시간이 특정 기준을 초과하는 부서를 식별합니다. `apply()` 내에서 날짜/시간 차이 계산 로직을 구현할 수 있습니다.
        * `df.groupby('부서').apply(lambda x: (x['최종결재일'] - x['품의생성일']).dt.days.mean())` : 부서별 평균 결재 소요 일수
    * **예시 (예산 소진율 분석):** 각 부서의 월별/분기별 예산 대비 실제 지출액을 계산하고, 예산 소진율이 과도하게 높거나 낮은 부서를 찾아냅니다.
        * `df.groupby(['부서', '월']).apply(lambda x: x['지출액'].sum() / x['예산액'].iloc[0])` : 부서/월별 예산 소진율 (예산액은 그룹 내에서 한 번만 발생한다고 가정)

3.  **재무제표 항목의 심층 분석:**
    * **예시 (매출액 변동 패턴 분석):** 특정 고객 그룹이나 제품군별로 월별 매출액의 **추세(Trend)나 계절성(Seasonality)**을 파악하기 위해 각 그룹의 시계열 데이터를 분석하는 함수를 `apply()`에 적용합니다.
    * **예시 (현금 흐름 패턴):** 각 사업 부문별로 현금 흐름의 변동성 또는 특정 패턴을 분석하여 재무 위험을 평가합니다.

**결론적으로, `apply()`는 Pandas의 '만능 칼'과 같습니다.**
`agg()`, `filter()`, `transform()`으로 커버할 수 없는 복잡한 논리나, 그룹별로 DataFrame 또는 Series를 반환하여 추가 분석이 필요한 상황에서 `apply()`는 공인회계사가 데이터를 자유자재로 조작하고 심층적인 통찰을 얻는 데 결정적인 역할을 합니다. 다만, 높은 유연성만큼 성능 측면에서는 다른 특정 목적 메서드보다 느릴 수 있으므로, 단순한 연산에는 다른 메서드를 우선 고려하는 것이 좋습니다.
"""
