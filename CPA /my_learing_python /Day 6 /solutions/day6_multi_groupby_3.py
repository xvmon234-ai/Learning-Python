# ==============================================================================
# [문제 6.2.3] Pandas 다중 컬럼 그룹화 및 다중 집계 (Day 6 학습 내용)
# ==============================================================================

# --- [최초 나의 코딩] ---
import pandas as pd
data = {'CustomerID': [1, 2, 1, 3, 2, 1],
        'OrderID': [101, 102, 103, 104, 105, 106],
        'Amount': [500, 250, 700, 150, 300, 400]}
customer_orders_df = pd.DataFrame(data)

grouped_df_v2 = customer_orders_df.groupby("CustomerID").agg(총주문량=("Amount", "sum"), 총주문횟수=("OrderID", "count"))

print("\n--- Customer Order Summary ---")
print(grouped_df_v2)

# --- [코드 실행 결과] ---
"""
--- Customer Order Summary ---
            총주문량  총주문횟수
CustomerID               
1           1600      3
2            550      2
3            150      1
"""

# --- [피드백] ---
"""
문제 6.2.3을 **완벽하게 해결**하셨습니다! 각 고객별 총 주문 금액과 주문 건수를 정확히 계산하고, 컬럼 이름까지 명확하게 지정했습니다.

1.  **정확한 그룹화**: `customer_orders_df.groupby("CustomerID")`를 통해 고객별로 데이터를 올바르게 그룹화했습니다.
2.  **`agg()`를 사용한 다중 집계 및 컬럼명 지정**: `agg(총주문량=("Amount", "sum"), 총주문횟수=("OrderID", "count"))` 구문은 `agg()`의 유연성과 컬럼명 지정 기능을 잘 활용했습니다.
    * `총주문량=("Amount", "sum")`: 'Amount' 컬럼의 합계를 '총주문량'으로 명명했습니다.
    * `총주문횟수=("OrderID", "count")`: 'OrderID' 컬럼의 개수(즉, 주문 건수)를 '총주문횟수'로 명명했습니다. `OrderID`와 같이 고유한 값을 가진 컬럼의 `count()`는 해당 그룹의 행 개수를 세는 데 적합하며, 이는 곧 주문 건수를 의미합니다.

이 풀이는 Pandas `groupby()`와 `agg()` 메서드를 활용한 복합적인 데이터 요약의 모범적인 예시이며, 실제 비즈니스 데이터 분석에서 고객 행동을 이해하는 데 매우 유용합니다.
"""

# --- [모범 답안] ---
# 이미 '최초 나의 코딩'에서 모범적으로 해결되었으므로, 추가적인 모범 답안은 생략합니다.
# 일반적으로 변수에 할당하여 재사용하는 것이 좋습니다.
# customer_summary = customer_orders_df.groupby("CustomerID").agg(
#     총주문금액=("Amount", "sum"),
#     주문건수=("OrderID", "count")
# )
# print("\n--- Customer Order Summary (모범 답안 예시) ---")
# print(customer_summary)


# --- [학습 기록] ---
"""
**학습 질문**: 각 고객(CustomerID)별로 총 주문 금액과 해당 고객의 총 주문 건수를 동시에 계산하려면 어떻게 해야 할까?

**문제 해결**:
1.  **데이터프레임 준비**: 문제에서 주어진 고객 주문 데이터를 포함하는 `customer_orders_df`를 생성했습니다.
2.  **`groupby()`로 그룹화**: `customer_orders_df.groupby("CustomerID")`를 사용하여 데이터를 `'CustomerID'` 컬럼을 기준으로 그룹화했습니다.
3.  **`agg()`로 다중 집계 및 컬럼명 지정**: 그룹화된 객체에 `.agg()` 메서드를 적용하여 두 가지 집계 연산을 동시에 수행했습니다.
    * `총주문량=("Amount", "sum")`: `'Amount'` 컬럼의 `sum` 결과를 `총주문량`이라는 이름으로,
    * `총주문횟수=("OrderID", "count")`: `'OrderID'` 컬럼의 `count` 결과를 `총주문횟수`라는 이름으로 각각 새로운 컬럼에 저장하도록 지시했습니다. `count()` 함수는 해당 컬럼의 비-NaN 값의 개수를 세므로, `OrderID`와 같이 모든 주문에 고유하게 존재하는 값의 개수를 세면 총 주문 건수를 나타낼 수 있습니다.
4.  **결과 확인**: 출력된 DataFrame에서 각 고객별 총주문량과 총주문횟수가 정확하게 계산되었고, 컬럼 이름도 원하는 대로 설정되었음을 확인했습니다.

**추가 학습**:
* **`count()` vs `size()`**: `count()`는 결측치(NaN)를 제외한 값의 개수를 세는 반면, `size()`는 결측치 포함하여 그룹의 총 행 개수를 셉니다. 주문 건수와 같이 모든 레코드가 유효할 것으로 예상되는 경우 `count()`를 사용해도 무방합니다. 만약 결측치가 있는 경우에도 그룹의 전체 레코드 수를 알고 싶다면 `size()`를 사용하는 것을 고려할 수 있습니다.
* **`agg()`의 활용**: `agg()` 메서드는 이처럼 다양한 컬럼에 다른 집계 함수를 적용하거나, 같은 컬럼에 여러 집계 함수를 적용하여 복합적인 요약 통계를 얻는 데 매우 강력합니다. 이는 데이터 요약 및 보고서 생성에 필수적인 기능입니다.
"""
