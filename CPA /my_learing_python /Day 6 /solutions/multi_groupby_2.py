# ==============================================================================
# [문제 6.2.2] Pandas 다중 컬럼 그룹화 및 다중 집계 (Day 6 학습 내용)
# ==============================================================================

# --- [최초 나의 코딩] ---
import pandas as pd
data = {'Category': ['Electronics', 'Clothes', 'Electronics', 'Books', 'Clothes'],
        'Product': ['TV', 'Shirt', 'Laptop', 'Novel', 'Pants'],
        'Quantity': [10, 25, 5, 15, 30],
        'Price': [500, 30, 1200, 20, 40]}
sales_df = pd.DataFrame(data)

grouped_df = sales_df.groupby("Category").agg(총재고=("Quantity", "sum"), 평균가격=("Price", "mean"))
# 집계 함수에도 큰 따옴표 해줘야 함을 까먹지 말기

print("\n--- Categorized Data with total Quant and Avg Price ---")
print(grouped_df)

# --- [코드 실행 결과] ---
"""
--- Categorized Data with total Quant and Avg Price ---
             총재고  평균가격
Category               
Books         15  20.0
Clothes       55  35.0
Electronics   15  850.0
"""

# --- [피드백] ---
"""
문제 6.2.2를 **완벽하게 해결**하셨습니다! `groupby()`와 `agg()`를 활용하여 여러 컬럼에 대해 다른 집계 함수를 적용하고, 동시에 결과 컬럼의 이름을 원하는 대로 지정하는 능력을 정확히 보여주셨습니다.

1.  **정확한 그룹화**: `sales_df.groupby("Category")`를 통해 제품 카테고리별로 데이터를 올바르게 그룹화했습니다.
2.  **`agg()`를 사용한 다중 컬럼, 다중 집계**: `agg(총재고=("Quantity", "sum"), 평균가격=("Price", "mean"))` 구문은 `agg()`의 유연성을 잘 활용했습니다.
    * `총재고=("Quantity", "sum")`: 'Quantity' 컬럼에 `sum` 함수를 적용하고 그 결과를 '총재고'라는 새 컬럼에 저장했습니다.
    * `평균가격=("Price", "mean")`: 'Price' 컬럼에 `mean` 함수를 적용하고 그 결과를 '평균가격'이라는 새 컬럼에 저장했습니다.
    * 특히, "집계 함수에도 큰 따옴표 해줘야 함을 까먹지 말기"라는 주석에서 알 수 있듯이, 문자열 형태의 함수 이름을 정확히 사용하신 점이 좋습니다. 이는 `agg()` 사용 시 흔히 실수할 수 있는 부분인데, 잘 지키셨습니다.
3.  **가독성 높은 결과**: 새롭게 지정된 컬럼 이름 덕분에 출력된 DataFrame의 내용이 훨씬 직관적이고 이해하기 쉽습니다.

이 풀이는 Pandas `groupby()`와 `agg()` 메서드를 활용한 데이터 요약 및 사용자 정의 집계의 모범적인 예시입니다.
"""

# --- [모범 답안] ---
# 이미 '최초 나의 코딩'에서 모범적으로 해결되었으므로, 추가적인 모범 답안은 생략합니다.
# 일반적으로 변수에 할당하여 재사용하는 것이 좋습니다.
# category_summary = sales_df.groupby("Category").agg(
#     총재고=("Quantity", "sum"),
#     평균가격=("Price", "mean")
# )
# print("\n--- Categorized Data with total Quant and Avg Price (모범 답안 예시) ---")
# print(category_summary)


# --- [학습 기록] ---
"""
**학습 질문**: 각 제품 카테고리별로 총 판매 수량과 평균 가격을 동시에 계산하고, 결과 컬럼의 이름을 사용자 정의하려면 어떻게 해야 할까?

**문제 해결**:
1.  **데이터프레임 준비**: 문제에서 주어진 판매 데이터를 포함하는 `sales_df`를 생성했습니다.
2.  **`groupby()`로 그룹화**: `sales_df.groupby("Category")`를 사용하여 데이터를 `'Category'` 컬럼을 기준으로 그룹화했습니다.
3.  **`agg()`로 다중 집계 및 컬럼명 지정**: 그룹화된 객체에 `.agg()` 메서드를 적용하여 두 가지 집계 연산을 동시에 수행했습니다.
    * `총재고=("Quantity", "sum")`: `'Quantity'` 컬럼의 `sum` 결과를 `총재고`라는 이름으로,
    * `평균가격=("Price", "mean")`: `'Price'` 컬럼의 `mean` 결과를 `평균가격`이라는 이름으로 각각 새로운 컬럼에 저장하도록 지시했습니다.
    * 여기서 `("원본_컬럼", "집계_함수_문자열")` 형태의 튜플을 사용한 것이 핵심입니다. 집계 함수는 반드시 `'sum'`, `'mean'`과 같이 문자열 형태로 제공되어야 합니다.
4.  **결과 확인**: 출력된 DataFrame에서 각 카테고리별 총재고와 평균가격이 정확하게 계산되었고, 컬럼 이름도 원하는 대로 설정되었음을 확인했습니다.

**추가 학습**:
* **`agg()`의 딕셔너리 문법**: `agg()` 메서드는 딕셔너리를 인자로 받을 때 `{새로운_컬럼명: (원본_컬럼명, '집계_함수_문자열')}` 또는 `{원본_컬럼명: ['집계_함수_문자열1', '집계_함수_문자열2']}` 와 같은 다양한 형태로 사용할 수 있습니다. 새로운 컬럼명을 지정하는 `(원본_컬럼명, '집계_함수_문자열')` 방식은 특히 결과를 직관적으로 만들 때 유용합니다.
* **집계 함수 문자열**: `sum`, `mean`, `max`, `min`, `count`, `size`, `std`, `var` 등 Pandas에서 미리 정의된 집계 함수 이름은 문자열로 전달할 수 있습니다.
* **사용자 정의 함수**: 필요에 따라 `lambda` 함수나 일반 Python 함수를 정의하여 `agg()`에 전달할 수도 있습니다. (예: `agg(custom_stat=('Quantity', lambda x: x.max() - x.min()))`)
"""
