# --- 함수의 독립성과 재사용성 ---

"""
[주제]
함수가 매개변수를 통해 데이터를 받는 이유: 독립성과 재사용성

[개념 설명]
함수는 특정 작업을 수행하는 '블랙 박스'와 같음.
이 블랙 박스가 작동하기 위해 필요한 입력은 **매개변수**를 통해 받음.

1.  **독립성**:
    * 함수가 외부의 특정 변수(예: `my_numbers`)에 직접 의존하면, 그 함수는 해당 변수가 있는 곳에서만 제대로 작동하거나, 변수 이름이 바뀌면 함수도 수정해야 함.
    * 매개변수를 통해 데이터를 받으면, 함수는 외부 환경으로부터 독립적으로 존재할 수 있음. 어떤 리스트든 매개변수로 전달받아 처리할 수 있게 됨.

2.  **재사용성**:
    * 독립성이 확보되면 함수의 재사용성이 극대화됨.
    * 예를 들어, `calculate_average` 함수는 `my_scores` 리스트뿐만 아니라, `student_grades`, `product_prices` 등 **어떤 숫자 리스트라도** 받아서 평균을 계산할 수 있음.
    * 만약 함수가 `my_numbers`에 고정되어 있었다면, 다른 리스트의 평균을 구할 때마다 함수를 새로 만들거나 `my_numbers`의 내용을 바꿔야 하는 비효율이 발생함.

[결론]
함수를 설계할 때는 필요한 모든 데이터를 매개변수로 받아서 처리하도록 하는 것이 좋음.
이는 코드를 더 유연하고 강력하게 만들며, 예측 불가능한 버그를 줄이는 데 기여함.
"""

# --- 함수 호출 방법 및 반환값 활용 ---

"""
[주제]
함수 호출 방법과 반환값(return value)의 활용

[개념 설명]
1.  **함수 호출 방법**:
    * 함수를 정의했다고 해서 그 코드가 자동으로 실행되는 것은 아님.
    * 함수 내부의 코드를 실행하려면 반드시 **함수 이름 뒤에 괄호 `()`를 붙여 호출**해야 함.
    * 매개변수가 있다면 괄호 안에 인수를 넣어 호출함 (예: `함수명(인수)`).
    * 매개변수가 없다면 단순히 `함수명()`으로 호출함.
    * **오류 예시**: `print(calculate_average)`는 함수 자체(객체)를 출력하는 것이지, 함수를 실행하는 것이 아님.

2.  **반환값(return value) 활용**:
    * 함수가 `return` 키워드를 사용하여 값을 반환하면, 함수를 호출한 곳으로 그 값이 되돌아옴.
    * 이 반환된 값은 일반 변수처럼 다른 변수에 **저장**하거나, **다른 연산에 사용**하거나, **바로 출력**할 수 있음.
    * **오류 예시**: `return print(...)`는 `print()` 함수의 반환값인 `None`을 반환하므로, 함수가 실제 계산 결과가 아닌 `None`을 반환하게 됨.

[코드 예시]
# 함수 정의
def multiply(a, b):
    return a * b

# 1. 함수 호출하고 반환값을 변수에 저장하여 활용
result = multiply(5, 3) # multiply(5, 3)이 실행되고 15가 반환되어 result에 저장됨
print(f"곱셈 결과: {result}") # result 변수 사용

# 2. 함수를 직접 print 문 안에서 호출하여 출력
print(f"다른 곱셈 결과: {multiply(7, 2)}") # multiply(7, 2)가 실행되어 14가 반환되고, 바로 출력됨
"""
