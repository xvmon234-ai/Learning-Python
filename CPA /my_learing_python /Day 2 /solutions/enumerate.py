fruits = ['사과', '바나나', '체리'] 

for index, fruit in enumerate(fruits):
  print(f"{index}: {fruit}")

#여기도 for x in list 를 하면, x 에 새로운 변수를 할당하는 개념이라는 것을 잊지 말기

"""
[학습 기록]

- 학습 질문:
  - 리스트의 요소와 함께 해당 요소의 순서(인덱스)를 함께 다루고 싶을 때, 어떻게 효율적으로 접근할 수 있을지 고민했음.
  - 기존의 'for i in range(len(list)): list[i]' 방식은 인덱스와 값을 동시에 사용하기에 다소 번거로웠음.

- 문제 해결:
  - 'enumerate()' 함수를 사용하면 리스트의 인덱스와 요소를 'for index, value in enumerate(list):'와 같이 한 번에 언패킹(unpacking)하여 사용할 수 있음을 알게 되었음.
  - 이를 통해 코드가 훨씬 간결해지고 가독성이 높아졌음.

- 추가 학습:
  - **반복문 변수 할당 개념 재확인 (Further Study 필요)**:
    'for num in range(10):'이나 'for fruit in my_list:'와 같이 반복문에서 사용되는 변수(여기서는 'num' 또는 'fruit')는 반복이 진행될 때마다 해당 시퀀스의 다음 요소로 **새롭게 할당(재할당)**되는 개념임을 다시 한번 상기했음. 이는 변수가 시퀀스의 요소를 '참조'하는 방식이 아니라, 새로운 값을 '받아오는' 방식이라는 점을 명확히 이해하는 데 도움이 되었음.
  - 'enumerate()'는 튜플(tuple) 형태로 (인덱스, 값)을 반환하며, 이를 for 문에서 바로 언패킹하여 사용하는 것이 일반적인 패턴임을 익혔음.
"""
