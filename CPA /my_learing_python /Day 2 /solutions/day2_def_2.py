# ==============================================================================
# Day 2: 파이썬 흐름 제어 및 함수 활용 스터디 기록 - 문제 3-2
# [문제 3-2] 평균 계산 함수
# ==============================================================================

# --- [사전 준비] ---
# print() 문을 통해 결과를 확인하세요.


# --- [최초 나의 코딩] ---
 my_numbers = [10, 20, 30, 40, 50]

 def calculate_average(x, y): # <-- [오류 1] 매개변수 선언 방식 오류 및 사용 미흡
     x = sum(my_numbers)     # <-- [오류 2] 'my_numbers'는 함수 외부 변수, 매개변수 'x'를 덮어씀
     y = len(my_numbers)     # <-- [오류 3] 'my_numbers'는 함수 외부 변수
     return x / y            # <-- [오류 4] 빈 리스트 예외 처리 없음

 print(f"평균: {calculate_average}") # <-- [오류 5] 함수를 호출하지 않고 함수 객체 자체를 출력

# --- [코드 실행 결과] ---
"""
(예상되는 오류)
Traceback (most recent call last):
  File "<stdin>", line 8, in calculate_average
NameError: name 'my_numbers' is not defined

(혹은)
<function calculate_average at 0x...>
"""

# --- [피드백] ---
"""
작성해준 코드는 이전보다 나아졌지만, 여전히 몇 가지 중요한 개념적인 오류를 포함하고 있음. 특히 **함수의 매개변수 사용법**과 **함수 호출 및 반환값 처리**에서 오해가 있었음.

1.  **매개변수 사용법 오류**: `def calculate_average(x, y):`처럼 두 개의 매개변수를 선언했지만, 실제 함수 내부에서는 이 `x`와 `y`를 사용하지 않고 `my_numbers`라는 **함수 외부에 정의된 변수**를 사용했음. 함수는 외부 변수에 직접 의존하기보다 매개변수를 통해 필요한 데이터를 받는 것이 좋은 습관임.
2.  **`return` 값 처리 및 함수 호출 오류**: `return x / y`라고 반환값을 지정했지만, `print(f"평균: {calculate_average}")` 부분에서 `calculate_average` 함수를 **호출하지 않고 함수 객체 자체를 출력**하려 했음. 함수를 호출하려면 `calculate_average()`처럼 괄호를 붙여야 함.
3.  **빈 리스트 예외 처리 누락**: 빈 리스트가 입력될 경우 `len(my_numbers)`가 `0`이 되어 `ZeroDivisionError`가 발생했을 것임.

이러한 점들을 고려하여 모범 답안을 제시했음.
"""

# --- [모범 답안] ---
# def calculate_average(numbers): # 'numbers'는 매개변수: 함수가 받을 리스트의 '이름'
#     """
#     숫자 리스트의 평균을 계산하고 반환하는 함수입니다.
#     리스트가 비어있을 경우 0을 반환합니다.
#     """
#     if not numbers: # 리스트가 비어있는지 확인 (True이면 비어있음)
#         return 0    # 비어있으면 0을 반환하고 함수 종료
#
#     total = sum(numbers) # 전달받은 리스트(numbers)의 합계를 계산
#     average = total / len(numbers) # 전달받은 리스트(numbers)의 길이로 나누어 평균 계산
#     return average # 계산된 평균 값을 반환
#
# # 함수 호출 예시:
# my_scores = [10, 20, 30, 40, 50] # 함수에 전달할 실제 '인수' 리스트
# avg1 = calculate_average(my_scores) # 함수를 호출하고 반환값을 변수에 저장
# print(f"평균: {avg1}")
#
# empty_list = []
# avg2 = calculate_average(empty_list) # 비어있는 리스트로 함수 호출
# print(f"빈 리스트의 평균: {avg2}")

# --- [학습 기록] ---
"""
**학습 질문**: 숫자 리스트의 평균을 계산하는 함수를 만들고, 빈 리스트가 들어왔을 때 오류 없이 0을 반환하려면 어떻게 해야 할까?

**문제 해결**:
1.  **매개변수를 통한 데이터 전달**: 함수 외부의 변수를 직접 사용하는 대신, `def calculate_average(numbers):`처럼 **매개변수 `numbers`를 통해 리스트를 전달**받아 함수 내부에서 활용했음. 이는 함수의 독립성과 재사용성을 높이는 핵심적인 방법임을 학습했음.
2.  **`return`으로 결과 반환**: `print()`를 사용해 함수 내에서 직접 출력하는 대신, `return average`와 같이 계산된 평균 값을 **`return` 키워드를 사용하여 함수 외부로 반환**하도록 수정했음. 반환된 값은 함수 호출 후 변수에 저장하여 필요에 따라 출력하거나 다른 연산에 활용할 수 있었음.
3.  **빈 리스트 예외 처리**: `if not numbers: return 0`과 같은 **조건문을 추가**하여 빈 리스트가 입력될 경우 발생할 수 있는 `ZeroDivisionError`를 사전에 방지하고, 문제의 요구사항대로 0을 반환하도록 처리했음.

**추가 학습**:
-   **함수의 독립성과 재사용성 (Further Study 필요)**: 함수가 외부 변수에 직접 의존하지 않고 매개변수를 통해 필요한 데이터를 받는 것이 왜 중요한지(유연성, 재사용성, 오류 감소) 심화 학습이 필요함.
-   **함수 호출 방법 및 반환값 활용 (Further Study 필요)**: `함수이름()`으로 호출하고, `return`된 값을 변수에 저장하거나 다른 연산에 사용하는 방식에 대한 명확한 이해가 필요함.
-   **[공인회계사 업무 연관성]**:
    * **반복적인 재무 계산 자동화**: 기업의 여러 부서나 다양한 프로젝트의 평균 매출, 평균 비용, 평균 이익률 등을 계산해야 할 때, 이 `calculate_average` 함수 하나로 모든 리스트에 적용하여 효율적으로 분석할 수 있음. 이는 수많은 데이터를 빠르게 처리하고 오류를 줄이는 데 매우 중요함. (예: 다수의 자회사별 손익 데이터 평균 계산)
    * **재무 비율 분석**: 회계 비율(유동비율, 부채비율 등)을 계산하는 함수를 만들어두면, 재무제표 데이터를 입력받아 자동으로 비율을 계산하고 분석에 활용할 수 있음. 함수는 이처럼 표준화된 계산 로직을 캡슐화하는 데 적합함.
    * **데이터 유효성 검증 및 예외 처리**: 재무 데이터는 종종 누락되거나 잘못된 값을 포함할 수 있음. 함수 내에서 `if not numbers:`와 같이 **입력값의 유효성을 검증하고 예외를 처리**하는 습관은 실제 회계 데이터 분석 시 발생할 수 있는 런타임 오류를 방지하고, 분석 결과의 신뢰성을 높이는 데 필수적임. (예: 0으로 나누는 오류 방지, 음수 값 처리 등)
"""
