# ==============================================================================
# [문제 1-2] 리스트(List) 조작 (Day 1 학습 내용)
# ==============================================================================

# --- [최초 나의 코딩] ---
scores = [85, 92, 78, 90]

scores.append(65)
scores.remove(92)
scores.sort()

print(scores)

# --- [코드 실행 결과] ---
"""
[65, 78, 85, 90]
"""

# --- [피드백] ---
"""
문제 1-2를 **완벽하게 해결**하셨습니다! 리스트에 요소를 추가하고, 특정 값을 삭제하며, 최종적으로 정렬하는 모든 요구사항을 정확히 충족했습니다. 리스트의 핵심 메서드들을 능숙하게 사용하고 있음을 보여줍니다.
"""

# --- [모범 답안] ---
# 최초 나의 코딩이 모범 답안과 동일합니다.
# 코드 가독성을 위해 각 줄에 주석을 추가하는 습관을 들이는 것이 좋습니다.

# scores = [85, 92, 78, 90]
# scores.append(65)
# scores.remove(92)
# scores.sort()
# print(scores)


# --- [학습 기록] ---
"""
**학습 질문**: 리스트에 요소를 추가하고, 특정 값을 삭제하며, 리스트를 정렬하는 방법은?

**문제 해결**:
1.  **리스트 선언**: `scores = [85, 92, 78, 90]`와 같이 대괄호 `[]`를 사용하여 리스트를 초기화했습니다.
2.  **요소 추가**: `scores.append(65)`를 사용하여 리스트의 끝에 `65`를 추가했습니다.
3.  **요소 삭제**: `scores.remove(92)`를 사용하여 리스트에서 값 `92`를 찾아 삭제했습니다.
4.  **리스트 정렬**: `scores.sort()`를 사용하여 리스트의 요소를 오름차순으로 정렬했습니다. 이 메서드는 원본 리스트를 직접 변경합니다.

**핵심 정리**:
* `append()`: 리스트의 맨 뒤에 요소를 추가합니다.
* `remove()`: 리스트에서 특정 값을 찾아 삭제합니다.
* `sort()`: 리스트를 제자리에서(in-place) 정렬합니다. (원본 리스트 변경)
* `sorted()` 함수와 `list.sort()` 메서드의 차이점을 이해하는 것이 중요합니다. (`sorted()`는 새로운 정렬된 리스트를 반환하고 원본은 유지)
"""
