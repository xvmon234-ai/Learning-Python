# ==============================================================================
# [문제 1-4] 튜플(Tuple)과 집합(Set) (Day 1 학습 내용)
# ==============================================================================

# --- [문제 요구사항] ---
# 1. data = (100, 200, 300) 튜플을 선언하세요.
# 2. 이 튜플을 a, b, c 세 개의 변수에 언패킹(Unpacking)하여 할당하세요.
# 3. numbers = [1, 2, 3, 2, 1] 리스트를 선언하세요.
# 4. numbers 리스트의 중복을 제거한 결과를 출력하세요.

# --- [최초 나의 코딩] ---
data = (100, 200, 300)
a, b, c = data # 언패킹
print("\n --- 튜플 언패킹 하기 --- ")
print(f"{a}")
print(f"{b}")
print(f"{c}")

numbers = [1, 2, 3, 2, 1]
print("\n --- Set으로 중복값 없애기 --- ")
print(set(numbers)) # set은 매서드가 아님, 최초에 AttributeError 에러 발생

# --- [코드 실행 결과] ---
"""
 --- 튜플 언패킹 하기 ---
100
200
300

 --- Set으로 중복값 없애기 ---
{1, 2, 3}
"""

# --- [피드백] ---
"""
문제 1-4를 완벽하게 해결하셨습니다!
튜플 언패킹과 집합을 활용한 리스트 중복 제거 모두 정확하게 구현했습니다.

특히 `set()`이 리스트의 메서드가 아닌 내장 함수(또는 타입 생성자)라는 점을 스스로 파악하고 기록한 점이 매우 훌륭합니다. 이는 파이썬의 객체 지향 개념과 함수/메서드 구분을 이해하는 중요한 통찰입니다.
"""

# --- [모범 답안] ---
# 최초 나의 코딩이 모범적으로 해결되었으므로, 추가적인 모범 답안은 생략합니다.
# 다만, 출력 메시지를 좀 더 명확히 하고 변수에 할당하는 것이 좋습니다.
# unique_numbers = set(numbers)
# print(f"\n중복 제거된 리스트: {unique_numbers}")

# --- [학습 기록] ---
"""
**학습 질문**: 튜플의 언패킹 기능과 집합을 이용한 중복 제거 방법은? `set()`은 메서드인가 함수인가?

**문제 해결 과정**:
1.  `data` 튜플을 선언하고, `a, b, c = data` 문법을 사용하여 튜플의 요소들을 개별 변수에 언패킹했습니다.
2.  `numbers` 리스트를 선언하고, `set(numbers)` 내장 함수를 사용하여 리스트를 집합으로 변환함으로써 중복된 값을 자동으로 제거했습니다.
3.  `set()`은 `리스트.메서드()`처럼 객체에 종속된 메서드가 아니라, `int()`, `str()`처럼 새로운 타입의 객체를 생성하는 **내장 함수**임을 확인했습니다.

**오답 분석 (해당하는 경우)**:
* `set()`을 리스트의 메서드로 오해하여 `numbers.set()`처럼 호출 시 `AttributeError`가 발생할 수 있음을 학습했습니다. `set()`은 독립적인 함수이므로 `set(numbers)` 형태로 사용해야 합니다.

**추가 학습 (공인회계사 업무와의 관련성)**:
* **데이터 정합성 및 중복 제거**: 감사 데이터나 고객 목록에서 중복된 거래, 중복된 고객 ID 등을 식별하고 제거하는 데 집합(Set)의 중복 제거 기능은 매우 유용합니다. 이는 데이터의 신뢰성을 확보하는 데 필수적입니다.
* **함수 반환 값 처리**: 함수가 여러 값을 튜플 형태로 반환할 때, 언패킹을 통해 각 반환 값을 명확한 변수에 할당하여 후속 분석에 활용할 수 있습니다. 예를 들어, `(총매출, 총비용)`을 반환하는 함수가 있다면 이를 `revenue, cost = get_summary_data()`처럼 언패킹하여 바로 사용할 수 있습니다.
"""
