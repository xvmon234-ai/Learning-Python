# ==============================================================================
# Day 1 학습: list.sort()와 sorted() 함수의 차이점 비교
# ==============================================================================

# 초기 리스트
numbers = [3, 1, 4, 2]
print(f"원본 리스트: {numbers}")
print("-" * 30)


# 1. list.sort() 메서드 사용 예시
# - 원본 리스트를 직접 정렬 (in-place)
# - 반환 값은 None이므로, 새로운 변수에 할당하지 않음
print("1. list.sort() 메서드 사용")
numbers.sort()
print(f"  sort() 실행 후 원본 리스트: {numbers}") # 원본이 변경됨
print("-" * 30)


# 2. sorted() 내장 함수 사용 예시
# - 원본 리스트는 그대로 두고, 정렬된 새로운 리스트를 반환
# - 반환 값을 새로운 변수에 할당해서 사용해야 함
numbers = [3, 1, 4, 2] # 원본 리스트를 다시 초기화
print("2. sorted() 함수 사용")
new_sorted_list = sorted(numbers)

print(f"  sorted() 함수로 생성된 새 리스트: {new_sorted_list}")
print(f"  sorted() 실행 후 원본 리스트: {numbers}") # 원본은 변경되지 않음
print("-" * 30)

# ==============================================================================
# 정리:
# list.sort(): 원본을 직접 변경 (in-place), 반환값 없음
# sorted(): 원본은 유지하고, 정렬된 새로운 리스트 반환
# ==============================================================================
