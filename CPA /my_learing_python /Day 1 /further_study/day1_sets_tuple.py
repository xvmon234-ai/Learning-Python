# ==============================================================================
# 파이썬 심화 학습: '[]' 문법의 활용 및 메서드 vs 함수의 차이
# ==============================================================================

# ------------------------------------------------------------------------------
# 1. 파이썬 '[]' 문법의 다목적성 (접근과 언패킹)
# ------------------------------------------------------------------------------

# '[]'는 파이썬에서 매우 다재다능한 문법입니다.
# 크게 두 가지 주요 용도로 사용됩니다: 요소 '접근(Access)'과 '언패킹(Unpacking)'.

# 1-1. '[]'를 이용한 요소 접근 (인덱싱 vs. 키잉)
#  - 리스트에서는 '순서(인덱스)'를 통해 요소에 접근합니다.
#  - 딕셔너리에서는 '고유한 키(Key)'를 통해 값에 접근합니다.

# [리스트 예시]
my_list = ['apple', 'banana', 'cherry']
print(f"리스트의 0번 인덱스 요소: {my_list[0]}") # 출력: apple
print(f"리스트의 1번 인덱스 요소: {my_list[1]}") # 출력: banana
print("-" * 30)

# [딕셔너리 예시]
my_dict = {'name': 'Alice', 'age': 30}
print(f"딕셔너리의 'name' 키 값: {my_dict['name']}") # 출력: Alice
print(f"딕셔너리의 'age' 키 값: {my_dict['age']}")   # 출력: 30
# 참고: 딕셔너리에 새 키-값을 추가/수정할 때도 []를 사용합니다.
my_dict['city'] = 'Seoul'
print(f"딕셔너리에 'city' 추가 후: {my_dict}")
print("-" * 30)


# 1-2. '[]'를 이용한 언패킹 (할당)
#  - 리스트나 튜플과 같은 iterable 객체의 요소들을 여러 변수에 '동시에' 할당하는 기능입니다.
#  - 변수의 개수와 iterable 요소의 개수가 일치해야 합니다.

# [튜플 언패킹 예시]
coordinates = (10, 20)
x, y = coordinates # 튜플 (10, 20)의 요소가 각각 x, y에 할당됨
print(f"언패킹된 x: {x}, y: {y}") # 출력: 언패킹된 x: 10, y: 20
print("-" * 30)

# [리스트 언패킹 예시]
student_info = ["철수", 20, "컴퓨터공학"]
name, age, major = student_info # 리스트 요소가 각각 name, age, major에 할당됨
print(f"언패킹된 정보: 이름={name}, 나이={age}, 전공={major}")
print("-" * 30)


# ------------------------------------------------------------------------------
# 2. 메서드(Method)와 함수(Function)의 차이
# ------------------------------------------------------------------------------

# 파이썬에서 '메서드'와 '함수'는 모두 특정 작업을 수행하는 코드 블록이지만,
# 호출 방식과 소속에 큰 차이가 있습니다.

# 2-1. 함수 (Function)
#  - 독립적으로 존재하며, 특정 객체에 속하지 않고 직접 호출됩니다.
#  - 인자로 객체를 받아서 처리하는 경우가 많습니다.

# [함수 예시]
my_list = [1, 2, 3, 4, 5]
# len(): 리스트의 길이를 반환하는 내장 함수 (리스트 객체에 속하지 않음)
list_length = len(my_list)
print(f"리스트의 길이 (len() 함수 사용): {list_length}")

# print(): 값을 출력하는 내장 함수
print("이것은 print() 함수로 출력된 메시지입니다.")
print("-" * 30)


# 2-2. 메서드 (Method)
#  - 특정 '객체(Object)'에 속해 있으며, 해당 객체를 통해서만 호출됩니다.
#  - 객체의 데이터에 접근하거나 객체의 상태를 변경하는 데 사용됩니다.
#  - 호출할 때 . (점) 표기법을 사용합니다.

# [메서드 예시]
my_list = [3, 1, 2]
# my_list.append(): 리스트 객체(my_list)에 속한 메서드
my_list.append(4)
print(f"append() 메서드 사용 후 리스트: {my_list}")

# my_list.sort(): 리스트 객체(my_list)에 속한 메서드
my_list.sort()
print(f"sort() 메서드 사용 후 리스트: {my_list}")
print("-" * 30)


# [비교 예시: sorted() 함수 vs list.sort() 메서드]
original_list = [5, 2, 8, 1]

# sorted() 함수: 원본은 그대로 두고 정렬된 '새로운' 리스트 반환
new_sorted_list = sorted(original_list)
print(f"sorted() 함수 사용 후 원본: {original_list}, 새 리스트: {new_sorted_list}")

# list.sort() 메서드: 원본 리스트를 '직접' 정렬 (None 반환)
original_list.sort()
print(f"list.sort() 메서드 사용 후 원본: {original_list}")

# ==============================================================================
# 결론:
# - 함수: 독립적, 객체를 인자로 받음 (예: len(obj), print(obj))
# - 메서드: 객체에 소속, 객체를 통해 호출 (예: obj.append(), obj.obj.sort())
# ==============================================================================
```
