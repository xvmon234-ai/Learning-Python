# --- 추가 학습: Pandas axis=0 (행)과 axis=1 (열)의 의미 ---

"""
**개요**:
Pandas에서 `axis=0`이 행(row)을, `axis=1`이 열(column)을 의미하는 것은 많은 사용자들이 처음 접할 때 혼란스러워하는 부분입니다. 이는 단순히 숫자를 외우기보다는 그 뒤에 있는 논리와 다른 프로그래밍/수학 개념과 연결하여 이해하면 훨씬 기억하기 쉽습니다.

**왜 `axis=0`이 행(row)을 의미할까?**

1.  **Numpy의 영향 (수학적 개념)**:
    Pandas는 내부적으로 고성능 수치 연산을 위해 `NumPy` 라이브러리를 기반으로 합니다. `NumPy`에서 다차원 배열(array)을 다룰 때, 기본적으로 `axis=0`은 **첫 번째 차원**을 의미하고, `axis=1`은 **두 번째 차원**을 의미합니다.
    * 2차원 배열에서 `axis=0`은 **행(row)** 방향으로의 연산을 의미합니다. 즉, 각 **열(column)**을 따라 아래로 내려가면서(행을 가로지르며) 연산을 수행합니다.
    * `axis=1`은 **열(column)** 방향으로의 연산을 의미합니다. 즉, 각 **행(row)**을 따라 옆으로 이동하면서(열을 가로지르며) 연산을 수행합니다.

    예를 들어, `np.sum(array, axis=0)`은 각 열의 합계를 계산하고, `np.sum(array, axis=1)`은 각 행의 합계를 계산합니다.
    Pandas DataFrame은 본질적으로 2차원 데이터를 다루므로, 이러한 `NumPy`의 `axis` 개념을 그대로 차용했습니다.

2.  **"방향" 또는 "차원"으로 생각하기**:
    `axis`는 "축" 또는 "차원"을 의미합니다. 연산을 수행할 때 데이터가 "사라지는" 방향으로 생각하면 이해하기 쉽습니다.
    * `axis=0`: 행을 기준으로 연산 -> 행들이 사라지고, 각 열에 대한 결과가 남습니다. (예: `df.sum(axis=0)`은 각 열의 합계를 구합니다. 행들은 사라지고 열만 남죠.)
    * `axis=1`: 열을 기준으로 연산 -> 열들이 사라지고, 각 행에 대한 결과가 남습니다. (예: `df.sum(axis=1)`은 각 행의 합계를 구합니다. 열들은 사라지고 행만 남죠.)

    이는 마치 엑셀에서 "열 합계"를 구하기 위해 아래로 스크롤하거나 "행 합계"를 구하기 위해 옆으로 스크롤하는 것과 유사합니다.

**DataFrame에서 행(row)을 조금 더 우선순위로 볼까? (row=value이자 data)?**

Pandas나 데이터베이스 개념에서 **행(row)**은 일반적으로 개별 **관측치(observation)** 또는 **레코드(record)**를 나타냅니다. 반면 **열(column)**은 각 관측치의 **속성(attribute)** 또는 **변수(feature)**를 나타냅니다.

* `row=value이자 data`라는 표현은 매우 정확합니다. 개별 행 자체가 하나의 데이터 엔티티(예: 한 명의 고객, 한 번의 거래)의 모든 정보를 담고 있기 때문에, 데이터의 "개념적 단위"로서 행이 더 중요하게 여겨지는 경향이 있습니다.
* 많은 데이터 처리 작업(필터링, 삭제, 정렬)이 개별 관측치(즉, 행)를 대상으로 이루어집니다. 예를 들어, `df.dropna()`의 기본값이 `axis=0` (행 삭제)인 것, `df.sort_values()`가 기본적으로 행을 정렬하는 것 등이 이를 뒷받침합니다.
* 따라서 `axis=0`이 행을 의미하는 것은 `NumPy`의 기반 개념을 따르는 동시에, 데이터 분석에서 개별 관측치(행)의 중요성을 반영하는 자연스러운 선택이라고 볼 수 있습니다.

**요약**:
`axis=0`이 행을 의미하는 것은 Pandas가 기반을 둔 `NumPy`의 다차원 배열 연산 규칙을 따르기 때문입니다. 그리고 데이터 분석에서 행은 개별 관측치를 나타내는 핵심 단위이므로, 기본 연산 방향으로 설정되는 경우가 많습니다.

**실습 예시**:
"""

import pandas as pd
import numpy as np

# 예시 DataFrame 생성
df = pd.DataFrame({
    'ColA': [10, 20, 30],
    'ColB': [1, 2, 3],
    'ColC': [100, 200, 300]
})

print("--- 원본 DataFrame ---")
print(df)

print("\n--- axis=0 (행 방향) 연산 예시: 각 열의 합계 ---")
# df.sum(axis=0)은 각 열(ColA, ColB, ColC)을 따라 아래로 내려가면서(행을 가로지르며) 합계를 계산
# 결과는 각 열의 합계를 나타내는 Series
print(df.sum(axis=0))

print("\n--- axis=1 (열 방향) 연산 예시: 각 행의 합계 ---")
# df.sum(axis=1)은 각 행을 따라 옆으로 이동하면서(열을 가로지르며) 합계를 계산
# 결과는 각 행의 합계를 나타내는 Series
print(df.sum(axis=1))

print("\n--- axis=0 (행 방향) 삭제 예시: 첫 번째 행 삭제 ---")
# df.drop(index=0, axis=0)은 0번 인덱스의 행을 삭제
# 행을 기준으로 삭제 (행 자체가 사라짐)
print(df.drop(index=0, axis=0))

print("\n--- axis=1 (열 방향) 삭제 예시: 'ColB' 열 삭제 ---")
# df.drop(columns='ColB', axis=1)은 'ColB' 열을 삭제
# 열을 기준으로 삭제 (열 자체가 사라짐)
print(df.drop(columns='ColB', axis=1))
