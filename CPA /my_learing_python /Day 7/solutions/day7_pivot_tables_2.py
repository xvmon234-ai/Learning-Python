# solutions.py

# ==============================================================================
# [문제 3-2] 월별 제품 판매 데이터 다중 값 피벗 테이블 생성 (Day 7 학습 내용)
# ==============================================================================

# --- [최초 나의 코딩] ---
import pandas as pd
import numpy as np # aggfunc에 np.sum 등을 사용할 수 있음을 보여주기 위함

data_monthly_sales = {
    'Month': [1, 1, 2, 2, 2, 3, 3, 1],
    'Product': ['Laptop', 'Mouse', 'Laptop', 'Keyboard', 'Mouse', 'Mouse', 'Laptop', 'Monitor'],
    'Quantity': [5, 10, 3, 7, 12, 8, 4, 2],
    'Sales': [5000, 200, 3000, 350, 240, 160, 4000, 600]
}
monthly_sales_df = pd.DataFrame(data_monthly_sales)

# Product를 행(index), Month를 열(columns)로 하고 Quantity와 Sales의 평균을 집계하며,
# NaN 값은 0으로 채우는 피벗 테이블 생성
pivot_table = monthly_sales_df.pivot_table(index='Product', columns='Month', values=['Quantity', 'Sales'], aggfunc='mean', fill_value=0)

print("\n --- Pivot Table --- \n")
print(pivot_table)

# --- [코드 실행 결과] ---
"""
 --- Pivot Table ---

           Quantity             Sales
Month             1    2    3     1     2     3
Product
Keyboard        0.0  7.0  0.0   0.0   350   0.0
Laptop          3.5  3.0  4.0  2800  3000  4000
Monitor         2.0  0.0  0.0   600     0     0
Mouse           6.0 12.0  8.0   200   240   160
"""

# --- [피드백] ---
"""
문제 3-2를 **아주 훌륭하게 해결**하셨습니다! `pivot_table` 함수를 사용하여 월별 제품 판매 데이터를 **두 가지 값(`Quantity`, `Sales`)에 대해 동시에 평균 집계**하고, **결측값(`NaN`)을 `0`으로 처리**하는 복합적인 피벗 테이블을 정확하게 생성했습니다. 이는 Pandas의 다차원 데이터 요약 기능을 매우 잘 이해하고 활용하고 있음을 보여줍니다.

1.  **다중 값 집계**: `values=['Quantity', 'Sales']`를 통해 `Quantity`와 `Sales` 두 컬럼에 대해 동시에 집계를 수행했습니다. 이로 인해 결과 DataFrame의 컬럼에 MultiIndex가 생성되어 각 값과 월별 데이터가 명확하게 구분됩니다.
2.  **정확한 집계 함수 및 구조**: `index='Product'`, `columns='Month'`, `aggfunc='mean'`을 사용하여 문제의 요구사항에 완벽히 부합하는 구조와 집계 방식을 적용했습니다.
3.  **`fill_value`의 효과적인 사용**: `fill_value=0`을 통해 데이터에 존재하지 않는 `Product-Month` 조합의 `NaN` 값을 `0`으로 깔끔하게 채웠습니다. 이는 보고서의 가독성을 높이고, 후속 계산에서 `NaN`으로 인한 오류를 방지하는 좋은 방법입니다.

이 풀이는 실제 비즈니스 데이터 분석에서 여러 지표를 한 번에 요약하고 시각화 가능한 형태로 가공할 때 매우 유용하며, Pandas `pivot_table`의 강력함을 잘 보여주는 모범적인 예시입니다.
"""

# --- [모범 답안] ---
# 이미 '최초 나의 코딩'에서 모범적으로 해결되었으므로, 추가적인 모범 답안은 생략합니다.
# 다만, 결과를 변수에 할당하고 출력 메시지를 명확히 하는 것은 좋은 습관입니다.

# monthly_product_performance_pt = monthly_sales_df.pivot_table(
#     index='Product',
#     columns='Month',
#     values=['Quantity', 'Sales'],
#     aggfunc='mean',
#     fill_value=0
# )
# print("\n--- 월별 제품별 수량 및 판매액 평균 피벗 테이블 ---")
# print(monthly_product_performance_pt)


# --- [학습 기록] ---
"""
**학습 질문**: 월별 제품 판매 데이터를 제품별/월별로 요약하고, 판매된 '수량'과 '판매액'의 평균을 동시에 계산하려면 어떻게 해야 할까? 데이터가 없는 칸은 0으로 표시하려면?

**문제 해결**:
1.  **데이터프레임 준비**: 월, 제품, 수량, 판매액 정보를 포함하는 `monthly_sales_df`를 생성했습니다.
2.  **`pivot_table()` 함수와 다중 값/결측값 처리**:
    * `index='Product'`: 피벗 테이블의 행 인덱스로 'Product' 컬럼을 지정했습니다.
    * `columns='Month'`: 피벗 테이블의 열(컬럼) 인덱스로 'Month' 컬럼을 지정했습니다.
    * `values=['Quantity', 'Sales']`: **두 개 이상의 컬럼에 대해 집계를 수행**하기 위해 리스트 형태로 `'Quantity'`와 `'Sales'`를 지정했습니다. 이 경우, 결과 피벗 테이블의 컬럼에는 상위 레벨에 `Quantity`와 `Sales`가, 하위 레벨에 `Month`가 있는 MultiIndex가 생성됩니다.
    * `aggfunc='mean'`: 각 교차점에서 해당하는 'Quantity'와 'Sales' 값들의 평균을 계산하도록 집계 함수를 `'mean'`으로 지정했습니다.
    * `fill_value=0`: 피벗 테이블 생성 시 데이터가 존재하지 않아 `NaN`이 발생하는 셀을 `0`으로 채우도록 지정했습니다. 이는 보고서의 명확성을 높이고 후속 분석을 용이하게 합니다.
3.  **결과 확인**: 출력된 `pivot_table`을 통해 각 제품별 월별 평균 수량과 평균 판매액이 정확하게 요약되었으며, 데이터가 없는 조합(예: Keyboard의 1월 판매량/판매액)은 0으로 채워져 있는 것을 확인했습니다.

**추가 학습 (공인회계사 업무와의 관련성 및 `pivot_table`의 다중 값/`fill_value` 활용)**:

CPA가 데이터를 분석하는 업무에서 `pivot_table`의 **다중 값 집계**와 **`fill_value` 처리**는 **종합적인 성과 지표를 한눈에 파악하고, 불완전한 데이터셋을 정량적으로 해석**하는 데 매우 중요합니다. 이는 재무 보고서 작성, KPI 분석, 그리고 데이터 결측치 처리에 있어 핵심적인 기능입니다.

* **종합적인 재무 및 운영 성과 지표 분석**:
    * **예시**: 월별, 부서별로 **'매출액', '매출원가', '판매량', '영업이익' 등 여러 핵심 지표**를 동시에 피벗 테이블로 요약하여 부서별 성과를 다각도로 평가합니다.
        * `df.pivot_table(index='부서', columns='월', values=['매출액', '영업이익'], aggfunc='sum', fill_value=0)`
    * **활용**: CPA는 이를 통해 특정 부서가 어떤 지표에서 강점 또는 약점을 보이는지 종합적으로 파악하고, 비즈니스 성과에 대한 깊이 있는 통찰력을 제공하여 경영 의사결정을 지원합니다.

* **재고 및 비용 효율성 지표 동시 분석**:
    * **예시**: 제품별, 창고별로 **'평균 재고 수량', '재고 회전율', '관련 보관 비용'** 등을 동시에 집계하여 재고 관리의 효율성을 평가합니다.
        * `df.pivot_table(index='제품', columns='창고', values=['평균재고수량', '보관비용'], aggfunc='mean', fill_value=0)`
    * **활용**: 특정 제품이나 창고에서 재고 부담이 높거나 비용이 비효율적으로 발생하고 있는지 파악하여, 재고 폐기 손실 예측이나 비용 절감 방안을 모색합니다.

* **예산 대비 실적 분석 및 차이 식별**:
    * **예시**: **'실제 발생 비용'과 '예산 비용'**을 월별, 계정과목별로 동시에 집계하여 예산 편차를 분석합니다.
        * `df.pivot_table(index='계정과목', columns='월', values=['실제금액', '예산금액'], aggfunc='sum', fill_value=0)`
    * **활용**: 특정 계정에서 실제 지출이 예산을 초과하는지, 혹은 절감되었는지 등을 명확히 보여주어 예산 관리의 문제점을 식별하고 개선 방안을 제시하는 데 기여합니다.

* **결측 데이터의 명확한 표현 (`fill_value`)**:
    * 재무 데이터는 종종 모든 조합에 대해 값이 존재하지 않을 수 있습니다 (예: 특정 월에 판매되지 않은 제품). `NaN` 값을 그대로 두면 후속 계산 시 오류를 유발하거나 보고서의 가독성을 해칠 수 있습니다.
    * `fill_value=0`을 사용하면 **해당 기간에 해당 항목이 '없음'이 아니라 '0'이었다는 의미로 해석**될 수 있어, 데이터의 비어있는 부분을 명확하게 전달하고 후속 수치 계산(예: 총합, 평균)을 왜곡 없이 수행할 수 있게 합니다. CPA는 이를 통해 재무 데이터의 완전성을 시각적으로 확인하고, 계산의 정확성을 보장할 수 있습니다.

`pivot_table`에서 여러 값을 동시에 집계하고 `fill_value`를 사용하는 것은 CPA가 **복잡한 비즈니스 데이터를 다차원적으로 이해하고, 재무 성과를 명확하게 시각화하며, 데이터의 불완전성을 효과적으로 관리하여 신뢰성 있는 재무 분석 및 보고를 수행**하는 데 매우 중요한 고급 기술입니다.
"""
