# ==============================================================================
# [문제 3-1] 판매 데이터 피벗 테이블 생성 (평균 판매액) (Day 7 학습 내용)
# ==============================================================================

# --- [최초 나의 코딩] ---
import pandas as pd
import numpy as np # aggfunc에 np.sum 등을 사용할 수 있음을 보여주기 위함

data_sales = {
    'Date': ['2023-01-01', '2023-01-01', '2023-01-02', '2023-01-02', '2023-01-03', '2023-01-03', '2023-01-04'],
    'Region': ['East', 'West', 'East', 'West', 'East', 'West', 'East'],
    'Product': ['A', 'B', 'A', 'C', 'B', 'A', 'C'],
    'Sales': [100, 150, 120, 200, 180, 110, 250]
}
sales_data_df = pd.DataFrame(data_sales)

# Region을 행(index), Product를 열(columns)로 하고 Sales의 평균을 집계하는 피벗 테이블 생성
pivot_table = sales_data_df.pivot_table(index='Region', columns='Product', values='Sales', aggfunc='mean')

print("\n --- Pivot Table --- \n")
print(pivot_table)

# --- [코드 실행 결과] ---
"""
 --- Pivot Table ---

Product      A      B      C
Region
East     110.0  180.0  250.0
West     110.0  150.0  200.0
"""

# --- [피드백] ---
"""
문제 3-1을 **완벽하게 해결**하셨습니다! `pivot_table` 함수를 사용하여 판매 데이터를 `Region`별 `Product`별로 정확하게 교차 집계하고, 각 교차점의 `Sales` 평균을 계산했습니다. 이는 Pandas의 데이터 요약 및 재구조화 기능을 잘 이해하고 있음을 보여줍니다.

1.  **적절한 피벗 테이블 구조**: `index='Region'`, `columns='Product'`를 사용하여 원하는 대로 `Region`을 행 인덱스로, `Product`를 열 인덱스로 배치했습니다. 이는 데이터를 한눈에 파악하기 용이한 형태로 변환합니다.
2.  **올바른 값 선택**: `values='Sales'`를 통해 집계할 대상 컬럼을 정확하게 지정했습니다.
3.  **정확한 집계 함수**: `aggfunc='mean'`을 사용하여 각 교차점의 판매액에 대한 **평균**을 계산했습니다. 이는 문제의 요구사항을 정확히 충족시켰습니다.

`pivot_table`은 복잡한 데이터를 다차원적으로 요약하고 분석하는 데 매우 강력한 도구이며, 이 풀이는 그 사용법을 명확하게 보여줍니다. 특히, 데이터에 존재하지 않는 `Region-Product` 조합에 대해 자동으로 `NaN`을 표시하는 점도 피벗 테이블의 중요한 특성을 잘 활용한 것입니다.
"""

# --- [모범 답안] ---
# 이미 '최초 나의 코딩'에서 모범적으로 해결되었으므로, 추가적인 모범 답안은 생략합니다.
# 다만, 결과를 변수에 할당하고 출력 메시지를 명확히 하는 것은 좋은 습관입니다.

# sales_avg_by_region_product = sales_data_df.pivot_table(index='Region', columns='Product', values='Sales', aggfunc='mean')
# print("\n--- 지역 및 제품별 평균 판매액 피벗 테이블 ---")
# print(sales_avg_by_region_product)


# --- [학습 기록] ---
"""
**학습 질문**: 특정 데이터를 행과 열로 교차하여 요약하고, 그 교차점에서 특정 값의 평균을 계산하려면 어떻게 해야 할까? `pivot_table`의 주요 매개변수들은 무엇이며 어떻게 사용될까?

**문제 해결**:
1.  **데이터프레임 준비**: `Date`, `Region`, `Product`, `Sales` 정보를 포함하는 `sales_data_df`를 생성했습니다.
2.  **`pivot_table()` 함수 사용**:
    * `index='Region'`: 피벗 테이블의 **행 인덱스**로 사용할 컬럼을 지정했습니다. 결과 테이블에서 각 `Region`이 하나의 행을 구성합니다.
    * `columns='Product'`: 피벗 테이블의 **열(컬럼) 인덱스**로 사용할 컬럼을 지정했습니다. 결과 테이블에서 각 `Product`가 하나의 열을 구성합니다.
    * `values='Sales'`: 집계할 **값(Value)**으로 사용할 컬럼을 지정했습니다. 이 컬럼의 값들이 피벗 테이블의 셀을 채우게 됩니다.
    * `aggfunc='mean'`: `values`로 지정된 컬럼의 값들을 어떻게 집계할지 지정하는 **집계 함수**입니다. `'mean'`을 사용하여 각 `Region`과 `Product`의 교차점에서 해당하는 `Sales` 값들의 평균을 계산했습니다. `aggfunc`에는 `'sum'`, `'count'`, `'min'`, `'max'`, `np.sum`, `np.mean` 등 다양한 내장 함수 또는 사용자 정의 함수를 사용할 수 있습니다.
3.  **결과 확인**: 출력된 `pivot_table`을 통해 각 `Region`별로 `Product` A, B, C의 평균 판매액이 깔끔하게 요약된 것을 확인했습니다. 데이터에 해당 조합이 없을 경우(예: East의 C 제품은 2023-01-04에만 존재하지만, 다른 East-Product 조합은 여러 날짜에 걸쳐 존재하여 평균이 계산됨) `NaN` 대신 존재하는 값들로만 평균이 계산됩니다.

**추가 학습 (공인회계사 업무와의 관련성 및 `pivot_table`의 활용)**:

`pivot_table`은 CPA가 **대량의 재무 및 운영 데이터를 다각도로 요약하고 분석하여, 성과를 평가하거나 이상 징후를 식별하는 데 매우 강력하고 필수적인 도구**입니다. Excel의 피벗 테이블과 유사하게 작동하며, 복잡한 교차 분석을 자동화합니다.

* **다차원적인 성과 분석**:
    * **예시**: 특정 회계연도의 **매출 데이터를 '월별', '사업부별', '제품군별'**로 피벗 테이블을 만들어 각 차원에서의 매출 추이와 기여도를 분석합니다.
        * `df.pivot_table(index='월', columns='사업부', values='매출액', aggfunc='sum')`
    * **활용**: CPA는 이를 통해 특정 기간/부서/제품이 매출 증감에 미치는 영향을 파악하고, 예산 대비 실적 차이의 원인을 심층적으로 분석하여 경영진에게 보고합니다.

* **비용 분석 및 통제**:
    * **예시**: **각 계정과목별, 부서별, 프로젝트별 지출 내역**을 피벗 테이블로 요약하여, 불필요하거나 과도한 지출이 발생하는 영역을 식별합니다.
        * `df.pivot_table(index=['계정과목', '부서'], columns='프로젝트명', values='금액', aggfunc='sum')`
    * **활용**: 특정 부서의 특정 비용이 예년에 비해 급증했거나, 특정 프로젝트에서 예상치 못한 비용이 발생했는지 등을 빠르게 파악하여 비용 통제 및 예산 준수 여부를 감사합니다.

* **재고 및 자산 현황 요약**:
    * **예시**: **창고별, 품목별, 유통기한별 재고 현황**을 피벗 테이블로 요약하여 재고의 효율성을 분석하고, 장기 재고 또는 불용 재고의 규모를 파악합니다.
        * `df.pivot_table(index='창고명', columns='품목군', values='재고수량', aggfunc='sum')`
    * **활용**: 재고자산의 회전율을 계산하고, 노후 재고에 대한 충당금 설정의 적정성을 평가하는 데 기초 자료를 제공합니다.

* **회계 감사 시 위험 평가**:
    * **예시**: **거래처별, 계정과목별 미수금/미지급금 잔액**을 피벗 테이블로 요약하여, 부실 채권 위험이 높은 거래처나 특정 계정의 비정상적인 잔액을 빠르게 식별합니다.
        * `df.pivot_table(index='거래처명', columns='계정과목', values='잔액', aggfunc='sum')`
    * **활용**: 위험 기반 감사 접근법을 적용하여 감사 자원을 효율적으로 배분하고, 잠재적 오류나 부정 위험이 높은 영역에 집중할 수 있습니다.

`pivot_table`은 CPA가 **방대한 원시 데이터를 의미 있는 정보로 변환하고, 복잡한 재무 및 운영 데이터를 다양한 관점에서 심층 분석하여, 의사결정을 지원하고 감사 품질을 향상시키는 데 가장 핵심적인 기능 중 하나**입니다.
"""
