# ==============================================================================
# [문제 1] 학습 질문 / 문제 해결 / 추가 학습
# ==============================================================================

"""
[학습 질문]
`reset_index()` 메서드를 사용할 때, `drop` 매개변수의 기본값이 `False`라는 점을 인지하고 있었지만,
실제로 코드를 작성할 때 이를 명시해야 할지 잠시 망설였음.
또한 `pd.read_csv()`에서 `index_col` 파라미터로 인덱스를 바로 지정하는 방법도 함께 고려하는 것이 더 효율적인지 궁금했음.
"""

"""
[문제 해결]
`reset_index()`의 기본 동작을 신뢰하여 `drop=False`를 생략했고, 문제 요구사항에 따라
기존 인덱스(`'OrderDate'`)가 일반 컬럼으로 잘 유지되는 것을 확인했음.
`info()`와 `head()`를 사용하여 데이터 구조 변화를 검증했음.
"""

"""
[추가 학습]
1. `pd.read_csv()` 호출 시 `index_col` 파라미터를 사용하여 처음부터 인덱스를 지정하는 방식이 더 효율적임을 확인했음.
2. `reset_index()`의 `drop=True` 옵션을 활용하여 인덱스를 제거하는 시나리오에 대한 추가 연습이 필요하다고 느꼈음.
3. `set_index()`와 `reset_index()`의 `inplace=True/False` 및 `drop=True/False` 매개변수 조합을
   다양하게 테스트하며 DataFrame 원본 변경 여부와 컬럼 유지/삭제 동작을 명확히 이해해야 함.
4. `pd.read_csv()`의 추가 중요 파라미터들(예: `header`, `names`, `usecols`, `na_values`)을 탐구하여
   다양한 CSV 파일 불러오기 시나리오에 대비해야 함.
"""
