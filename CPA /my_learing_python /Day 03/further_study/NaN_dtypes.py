# ==============================================================================
# [문제 3] 학습 질문 / 문제 해결 / 추가 학습
# ==============================================================================

"""
[학습 질문]
딕셔너리-리스트(컬럼 기준) 방식으로 DataFrame을 생성할 때와 달리,
리스트-딕셔너리(행 기준) 방식에서는 컬럼 길이가 달라도 `ValueError`가 발생하지 않고
`NaN`으로 채워지는 이유와 그 유용성이 궁금했음.
"""

"""
[문제 해결]
제공된 `data_list`를 `pd.DataFrame()`으로 직접 생성하여,
컬럼 구성이 다른 행들이 누락된 컬럼에 `NaN`이 채워진 채로 DataFrame이 만들어지는 것을 확인했음.
`df.info()`를 통해 각 컬럼의 `Non-Null Count`가 달라진 것을 파악했고,
이는 행 기준 DataFrame 생성이 데이터의 유연한 처리에 강점이 있다는 것을 시사했음.
"""

"""
[추가 학습]
1. `DataFrame` 생성 방식(컬럼 기준 vs 행 기준)의 장단점을 다시 한번 명확히 정리하고,
   각 방식이 어떤 유형의 데이터나 상황에 더 적합한지 예시와 함께 정리해야 함.
2. `NaN` (Not a Number) 값의 의미와 Pandas에서 `NaN`을 다루는 기본적인 방법(예: `df.isnull()`, `df.fillna()`, `df.dropna()`)을 학습해야 함.
3. DataFrame의 각 컬럼별 데이터 타입(`Dtype`)이 `NaN` 값 존재 여부에 따라 어떻게 변화할 수 있는지(예: 정수형 컬럼이 `float`으로 변환되는 경우) 이해해야 함.
"""

# ==============================================================================
# [Day 3 전체 공통 추가 학습]
# (문제별 구체적인 내용과 중복되지 않는 일반적인 학습 주제를 기재함)
# ==============================================================================

"""
[Pandas 데이터 타입(Dtype) 심화]
- `object`, `int64`, `float64` 외에 자주 사용되는 Dtype(예: `datetime64`, `bool`, `category`)을 알아봐야 함.
- DataFrame 생성 시와 불러올 때 Dtype을 명시적으로 지정하는 방법(`dtype` 파라미터)을 복습해야 함.
- `df.astype()` 메서드를 사용하여 컬럼의 Dtype을 변경하는 방법을 학습해야 함.
"""
