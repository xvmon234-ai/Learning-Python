# ==============================================================================
# 추가 학습: try-except 예외 처리 (안정적인 프로그램 개발의 필수 요소)
# ==============================================================================

# 프로그램이 실행되는 동안 예상치 못한 오류(예외, Exception)가 발생할 수 있습니다.
# 예를 들어, 사용자에게 숫자를 입력받아야 하는데 문자를 입력하는 경우가 그렇죠.
# try-except 문은 이러한 예외가 발생했을 때 프로그램이 비정상적으로 종료되는 것을 막고,
# 오류를 안전하게 처리하여 안정성을 높이는 중요한 파이썬 문법입니다.

print("--- try-except 예외 처리 학습 ---")

# ------------------------------------------------------------------------------
# 1. try-except 기본 구조 및 활용 (While 루프 합계 계산 예시)
# ------------------------------------------------------------------------------

# 목표: 사용자로부터 숫자를 계속 입력받아 합계를 구하되,
#       숫자가 아닌 입력이 들어오면 오류 메시지를 출력하고 재입력을 요청하며,
#       0을 입력하면 루프를 종료하고 최종 합계를 출력합니다.

total_sum = 0 # 합계를 저장할 변수 초기화

print("\n숫자를 입력하세요 (0을 입력하면 합계 출력 후 종료):")

while True: # 무한 루프로 시작하여, 조건에 따라 break로 탈출
    user_input_str = input("숫자 입력: ") # 사용자로부터 문자열 입력받기
    
    # try 블록: 예외 발생 가능성이 있는 코드를 포함
    try:
        current_number = int(user_input_str) # 문자열을 정수로 변환 시도
    
    # except 블록: try 블록에서 ValueError가 발생했을 때 실행될 코드
    except ValueError:
        print("경고: 유효하지 않은 입력입니다! 숫자를 입력해주세요.")
        continue # 숫자가 아니었으므로 현재 반복을 건너뛰고 다음 입력으로 넘어감

    # 예외 없이 숫자로 잘 변환된 경우, 이후 코드 실행
    if current_number == 0:
        # 사용자가 0을 입력하면 루프 종료
        print("0이 입력되었습니다. 프로그램을 종료합니다.")
        break # while 루프 탈출
    else:
        # 0이 아니면 합계에 누적
        total_sum += current_number
        print(f"현재까지의 합계: {total_sum}")

print(f"최종 합계: {total_sum}")

print("-" * 50)

# ------------------------------------------------------------------------------
# 2. try-except를 사용하는 이유 (안정성 및 사용자 경험)
# ------------------------------------------------------------------------------

# 2-1. 프로그램의 안정성 확보
#  - `try-except`가 없다면, 사용자가 숫자 대신 'abc' 같은 문자를 입력했을 때
#    `int('abc')`에서 `ValueError`가 발생하고 프로그램은 즉시 종료됩니다.
#  - `try-except`를 사용하면 이러한 예외를 잡아내어 프로그램이 종료되지 않고
#    예외 상황에 대한 적절한 메시지를 사용자에게 보여줄 수 있습니다.

# 2-2. 사용자 경험 향상
#  - 사용자에게 오류가 발생했음을 알리고, 올바른 입력을 다시 요청하는 등의
#    친절한 안내를 제공하여 프로그램의 사용성을 높일 수 있습니다.
#  - 비정상적인 종료는 사용자에게 불편함과 불신을 줄 수 있습니다.

# ------------------------------------------------------------------------------
# 3. try-except의 심화 (다양한 예외 처리)
# ------------------------------------------------------------------------------

#  - `except` 뒤에 특정 예외 타입(예: `ValueError`, `TypeError`, `FileNotFoundError`)을 명시하여
#    각기 다른 종류의 오류에 대해 다르게 처리할 수 있습니다.
#  - `except Exception as e:`와 같이 사용하여 모든 종류의 예외를 처리하고
#    오류 메시지를 변수 `e`에 담아 더 상세한 정보를 얻을 수도 있습니다.
#  - `else` 블록: `try` 블록의 코드가 예외 없이 성공적으로 실행되었을 때만 실행됩니다.
#  - `finally` 블록: 예외 발생 여부와 관계없이 항상 실행되어야 하는 코드를 포함합니다 (예: 파일 닫기).

# [예시 코드 - 다양한 예외 처리]
# try:
#     # 코드 블록
#     result = 10 / 0 # ZeroDivisionError 발생
# except ValueError:
#     print("값 오류 발생!")
# except ZeroDivisionError:
#     print("0으로 나눌 수 없습니다!")
# except Exception as e: # 그 외 모든 예외
#     print(f"알 수 없는 오류 발생: {e}")
# else:
#     print("예외 없이 성공적으로 실행되었습니다.")
# finally:
#     print("어떤 경우든 항상 실행됩니다.")


# ==============================================================================
# 결론: try-except는 복잡하고 실제 사용될 프로그램을 만들 때 필수적인 방어 코드입니다.
# 안정적이고 사용자 친화적인 애플리케이션을 개발하기 위한 핵심적인 습관입니다.
# ==============================================================================
