# ==============================================================================
# [문제 1-5] 제어문 - for & while 반복문 (Day 1 학습 내용)
# ==============================================================================

# --- [문제 요구사항] ---
# 1. numbers = [1, 2, 3, 4, 5] 리스트를 for 루프를 사용해 순회하며, 짝수일 때만 해당 숫자를 출력하세요.
# 2. 사용자로부터 숫자를 계속 입력받아 합계를 구하다가 0을 입력하면 루프를 종료하고, 최종 합계를 출력하는 while 루프를 작성하세요.

# --- [최초 나의 코딩] ---
# for 루프 부분
numbers = [1, 2, 3, 4, 5]
for num in numbers:
    if num % 2 == 0:
        print(f"{num}")

# while 루프 부분 (초기 시도)
# users_input = input("숫자를 입력하세요: ")
# int_users_input = int(users_input)
# while int_users_input != 0:
#     print("0을 입력할 시 종료됩니다.") # 무한 루프에 빠짐
# print("종료됩니다.")

# --- [코드 실행 결과 (for 루프)] ---
"""
2
4
"""

# --- [코드 실행 결과 (while 루프 초기 시도)] ---
"""
(0이 아닌 값 입력 시 무한 반복)
"""

# --- [피드백] ---
"""
**for 루프 부분**: 완벽하게 해결하셨습니다! 리스트를 순회하며 조건문(`if num % 2 == 0`)을 사용하여 짝수만 정확히 필터링하고 출력했습니다.

**while 루프 부분 (초기 시도)**:
* `input()`과 `int()`를 사용한 점은 좋았으나, `int_users_input` 변수가 루프 **내부에서 업데이트되지 않아** 무한 루프에 빠졌습니다.
* 문제 요구사항인 **'합계 구하기'** 기능이 누락되었습니다.
* 루프 내에서 사용자에게 지속적으로 입력 메시지를 제공하는 것이 필요합니다.
"""

# --- [모범 답안] ---
# for 루프 부분
print("--- for 루프: 짝수만 출력 ---")
for num in numbers:
    if num % 2 == 0:
        print(f"짝수 발견: {num}")
print("-" * 30)

# while 루프 부분 (개선된 버전 - try-except 제외)
total_sum = 0 # 합계를 저장할 변수 초기화
print("--- while 루프: 0을 입력하면 종료 ---")
print("숫자를 입력하세요 (0을 입력하면 합계 출력 후 종료):")

while True: # 무한 루프로 시작하여, 조건에 따라 break로 탈출
    user_input_str = input("숫자 입력: ")
    
    # 사용자 입력 -> 정수 변환 (비숫자 입력 시 ValueError 발생 가능)
    current_number = int(user_input_str)

    if current_number == 0:
        print("0이 입력되었습니다. 프로그램을 종료합니다.")
        break
    else:
        total_sum += current_number
        print(f"현재까지의 합계: {total_sum}")

print(f"최종 합계: {total_sum}")

# --- [학습 기록] ---
"""
**학습 질문**: `for` 루프를 이용한 리스트 조건부 순회와 `while` 루프를 이용한 조건부 반복 및 합계 계산 방법은? `while` 루프의 무한 반복을 피하는 방법은?

**문제 해결 과정**:
1.  **`for` 루프**: `numbers` 리스트를 `for num in numbers:`로 순회하고, `if num % 2 == 0:` 조건문을 사용하여 짝수만을 필터링하여 출력했습니다.
2.  **`while` 루프**:
    * `total_sum` 변수를 0으로 초기화하여 합계를 누적하도록 했습니다.
    * `while True:`로 무한 루프를 시작하고, 루프 **내부에서 `input()`을 통해 `current_number`를 계속 업데이트**하도록 수정했습니다.
    * `current_number`가 `0`일 경우 `break` 문을 사용하여 루프를 명시적으로 종료하도록 구현했습니다.
    * `0`이 아닐 경우 `total_sum`에 `current_number`를 더하여 합계를 누적했습니다.

**오답 분석 (while 루프 초기 시도)**:
* `int_users_input` 변수가 루프 진입 전에 한 번만 할당되고 루프 내에서 업데이트되지 않아, `while` 조건이 항상 참이 되어 무한 루프에 빠졌습니다.
* **해결책**: `while` 루프의 조건 변수는 루프 **내부에서 반드시 변경**되어야 하며, 사용자 입력을 통해 이 변수를 업데이트하는 것이 일반적인 패턴입니다.

**추가 학습 (공인회계사 업무와의 관련성)**:
* **반복적인 데이터 처리**: 재무 데이터는 방대하며, 특정 조건에 맞는 거래를 반복적으로 찾아내거나(예: `for` 루프), 특정 기준이 충족될 때까지 데이터를 집계하는(예: `while` 루프) 작업이 빈번합니다.
* **데이터 검증 및 필터링**: `for` 루프와 조건문을 사용하여 특정 조건을 만족하는 데이터(예: 특정 기간의 거래, 특정 금액 이상의 지출)를 필터링하고 분석하는 데 활용됩니다.
* **사용자 상호작용 기반 분석**: `while` 루프는 사용자로부터 지속적으로 입력을 받아 특정 분석을 수행하거나 보고서를 생성하는 등, 상호작용적인 데이터 처리 시스템을 구축하는 데 사용될 수 있습니다. (예: 특정 계정 번호가 입력될 때까지 재무제표 조회)
* **자동화 스크립트**: 특정 조건이 만족될 때까지 반복적으로 작업을 수행하는 자동화 스크립트(예: 파일 처리, API 호출)에 `while` 루프가 활용됩니다.
"""
