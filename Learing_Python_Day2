## Day 2: 파이썬 기초 - 흐름 제어 및 함수 활용

이 학습 목표는 파이썬 코드가 어떤 로직으로 작동하는지 이해하고, 재사용 가능한 코드를 만드는 데 필수적인 \*\*흐름 제어(조건문, 반복문)\*\*와 **함수**를 숙련하는 것입니다.

### 1\. 조건문 (Conditional Statements)

#### **1.1. 관련 이론**

  * **`if / elif / else`**: 특정 조건에 따라 다른 코드를 실행하는 제어문.
  * **논리 연산자**: `and`, `or`, `not`을 사용해 여러 조건을 조합.
  * **들여쓰기**: 파이썬은 **들여쓰기**를 통해 코드 블록을 구분. 들여쓰기 수준이 같아야 같은 블록으로 인식됨.

#### **1.2. 암기해야 할 사항**

  * **기본 문법**: `if 조건:` / `elif 조건:` / `else:`
  * **비교 연산자**: `==` (같다), `!=` (같지 않다), `>` (크다), `<` (작다) 등.
  * **들여쓰기 규칙**: 콜론(`:`) 다음에는 들여쓰기 필수. 탭(Tab) 또는 공백 4칸 사용. **(중요도: ⭐⭐⭐)**

#### **1.3. 실습 문제**

##### [문제 유형(하)] 홀수/짝수 판별

  * **습득 목표**: `if/else` 조건문과 `%` (나머지 연산자)를 활용해 가장 기본적인 논리 흐름을 구현할 수 있습니다.
  * **문제 가이드**:
    1.  `input()` 함수를 사용해 사용자로부터 정수를 입력받습니다.
    2.  입력받은 숫자를 2로 나누었을 때 나머지가 0인지 확인합니다.
    3.  나머지가 0이면 "짝수입니다"를, 그렇지 않으면 "홀수입니다"를 출력합니다.
  * **모범 답안**:
    ```python
    num = int(input("숫자를 입력하세요: "))
    if num % 2 == 0:
        print("짝수입니다.")
    else:
        print("홀수입니다.")
    ```

##### [문제 유형(중)] 학점 계산기

  * **습득 목표**: `if/elif/else`를 사용하여 다단계 조건 처리를 구현하고, 논리적 순서를 설계할 수 있습니다.
  * **문제 가이드**:
    1.  점수(정수)를 입력받습니다.
    2.  90점 이상이면 'A', 80점 이상이면 'B', 70점 이상이면 'C', 그 외에는 'F'를 출력합니다.
  * **모범 답안**:
    ```python
    score = int(input("점수를 입력하세요: "))
    if score >= 90:
        print("A 학점입니다.")
    elif score >= 80:
        print("B 학점입니다.")
    elif score >= 70:
        print("C 학점입니다.")
    else:
        print("F 학점입니다.")
    ```

##### [문제 유형(상)] 윤년 판별기

  * **습득 목표**: 복잡한 조건을 `and`, `or` 논리 연산자로 조합하는 능력을 기릅니다.
  * **문제 가이드**:
    1.  연도를 입력받습니다.
    2.  윤년의 조건은 다음과 같습니다.
          * 4로 나누어 떨어지고, 100으로 나누어 떨어지지 않거나,
          * 400으로 나누어 떨어지는 해.
    3.  입력된 연도가 윤년인지 아닌지 출력하세요.
  * **모범 답안**:
    ```python
    year = int(input("연도를 입력하세요: "))
    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
        print(f"{year}년은 윤년입니다.")
    else:
        print(f"{year}년은 윤년이 아닙니다.")
    ```

-----

### 2\. 반복문 (Loops)

#### **2.1. 관련 이론**

  * **`for` 반복문**: 리스트, 딕셔너리, 문자열 등 **순회 가능한(iterable)** 객체의 요소를 하나씩 반복. `for 변수 in 시퀀스:`
  * **`range()` 함수**: 숫자 범위를 생성하는 함수. `range(끝)`, `range(시작, 끝)`, `range(시작, 끝, 간격)`.
  * **`enumerate()` 함수**: 인덱스와 값을 동시에 반복할 때 사용. `for 인덱스, 값 in enumerate(시퀀스):`
  * **`zip()` 함수**: 여러 시퀀스를 동시에 묶어 반복. `for 값1, 값2 in zip(시퀀스1, 시퀀스2):`
  * **`break / continue`**: `break`는 반복문 즉시 종료, `continue`는 현재 반복만 건너뛰고 다음 반복으로 진행.

#### **2.2. 암기해야 할 사항**

  * **`for`와 `in`의 조합**: 리스트, 딕셔너리 등 다양한 자료구조에 적용하는 방법. **(중요도: ⭐⭐⭐)**
  * **`range()` 함수의 세 가지 사용법**: `range(5)`, `range(1, 5)`, `range(1, 10, 2)`. **(중요도: ⭐⭐)**
  * **`break`와 `continue`의 명확한 역할 차이**. **(중요도: ⭐⭐)**

#### **2.3. 실습 문제**

##### [문제 유형(하)] 1부터 10까지 합계

  * **습득 목표**: `for`와 `range()`를 사용하여 정해진 횟수만큼 반복하고, 누적 합계를 계산할 수 있습니다.
  * **문제 가이드**:
    1.  `total_sum`이라는 변수를 0으로 초기화합니다.
    2.  `for` 반복문과 `range()`를 사용해 1부터 10까지의 숫자를 순회합니다.
    3.  각 숫자를 `total_sum`에 더해 누적 합계를 구합니다.
  * **모범 답안**:
    ```python
    total_sum = 0
    for i in range(1, 11):
        total_sum += i
    print(f"1부터 10까지의 합계: {total_sum}")
    ```

##### [문제 유형(중)] 리스트 요소와 인덱스 출력

  * **습득 목표**: `enumerate()`를 활용하여 리스트의 인덱스와 값을 동시에 처리하는 방법을 익힙니다.
  * **문제 가이드**:
    1.  `fruits = ['사과', '바나나', '체리']`라는 리스트를 정의합니다.
    2.  `enumerate()`를 사용해 "0: 사과", "1: 바나나", "2: 체리" 형식으로 출력하세요.
  * **모범 답안**:
    ```python
    fruits = ['사과', '바나나', '체리']
    for index, fruit in enumerate(fruits):
        print(f"{index}: {fruit}")
    ```

##### [문제 유형(상)] 딕셔너리 정렬

  * **습득 목표**: 딕셔너리의 `items()` 메서드와 `sorted()` 함수의 `key` 인자를 조합하여 정렬하는 고급 기술을 습득합니다.
  * **문제 가이드**:
    1.  `scores = {'Alice': 85, 'Bob': 92, 'Charlie': 78}` 딕셔너리를 정의합니다.
    2.  `scores`를 점수(값)를 기준으로 내림차순 정렬하여 `[('Bob', 92), ('Alice', 85), ('Charlie', 78)]` 형태의 리스트로 만드세요.
  * **모범 답안**:
    ```python
    scores = {'Alice': 85, 'Bob': 92, 'Charlie': 78}
    sorted_scores = sorted(scores.items(), key=lambda item: item[1], reverse=True)
    print(sorted_scores)
    ```

-----

### 3\. 함수 (Functions)

#### **3.1. 관련 이론**

  * **함수 정의**: `def 함수명(매개변수):`로 시작하는 코드 블록.
  * **매개변수(Parameter)**: 함수 정의 시 외부에서 받는 입력값의 이름.
  * **인수(Argument)**: 함수 호출 시 매개변수에 실제로 전달하는 값.
  * **반환값(Return Value)**: 함수가 수행한 결과를 되돌려주는 값. `return` 키워드 사용. `return`이 없으면 `None`을 반환.

#### **3.2. 암기해야 할 사항**

  * **함수 정의 문법**: `def`, `( )`, `:`의 조합.
  * **`return`의 역할**: 함수를 종료시키고 값을 반환. `print()`는 단순히 출력할 뿐 반환하지 않음. **(중요도: ⭐⭐⭐)**
  * **매개변수와 인수의 구분**. **(중요도: ⭐⭐)**

#### **3.3. 실습 문제**

##### [문제 유형(하)] 인사말 함수

  * **습득 목표**: 매개변수를 받는 가장 기본적인 함수를 정의하고 호출하는 방법을 익힙니다.
  * **문제 가이드**:
    1.  이름을 매개변수로 받아 "안녕하세요, [이름]님\!"을 출력하는 함수 `greet()`를 정의합니다.
    2.  함수를 호출할 때 "김민준"을 인수로 전달하세요.
  * **모범 답안**:
    ```python
    def greet(name):
        print(f"안녕하세요, {name}님!")

    greet("김민준")
    ```

##### [문제 유형(중)] 평균 계산 함수

  * **습득 목표**: 리스트를 매개변수로 받고, 내부 연산 후 결과를 `return`으로 반환하는 함수를 구현합니다.
  * **문제 가이드**:
    1.  숫자 리스트를 매개변수로 받아 평균을 계산하여 반환하는 함수 `calculate_average()`를 정의하세요.
    2.  `scores = [80, 90, 75, 88]` 리스트를 이용해 함수를 호출하고 평균값을 출력하세요.
  * **모범 답안**:
    ```python
    def calculate_average(numbers):
        total = sum(numbers)
        average = total / len(numbers)
        return average

    scores = [80, 90, 75, 88]
    avg_score = calculate_average(scores)
    print(f"점수의 평균: {avg_score}")
    ```

##### [문제 유형(상)] 중복 제거 함수

  * **습득 목표**: 함수의 입력과 출력에서 다양한 자료구조(리스트, 집합)를 활용하고, 함수 내에서 여러 연산을 결합하는 방법을 익힙니다.
  * **문제 가이드**:
    1.  리스트를 매개변수로 받아 중복을 제거하고 정렬된 리스트를 반환하는 함수 `get_unique_sorted_list()`를 정의하세요.
    2.  `data = [1, 5, 3, 2, 5, 1, 4]` 리스트를 이용해 함수를 호출하고 결과를 출력하세요.
  * **모범 답안**:
    ```python
    def get_unique_sorted_list(input_list):
        unique_items = set(input_list) # 집합(set)을 사용해 중복 제거
        sorted_list = sorted(list(unique_items)) # 다시 리스트로 변환 후 정렬
        return sorted_list

    data = [1, 5, 3, 2, 5, 1, 4]
    result = get_unique_sorted_list(data)
    print(f"중복 제거 및 정렬된 리스트: {result}")
    ```

이러한 형식으로 GitHub에 학습 과정을 정리하면, 단순한 코드 복사 붙여넣기가 아니라 문제 해결의 과정을 명확히 보여줄 수 있습니다. 이제 이 틀에 맞춰 학습을 진행하고, 각 문제에 대한 여러분의 고민과 해결 과정을 기록해 나가세요\!
